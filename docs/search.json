[
  {
    "objectID": "tasks_overview.html",
    "href": "tasks_overview.html",
    "title": "Course Tasks",
    "section": "",
    "text": "Task 1 - Creating Your First Github Repo\nGit is the world‚Äôs most popular version control system and Github is the most popular site for hosting code using git in the cloud. As a version control system, Git helps you keep your coding project files organized by keeping a record of when you edited files and tags them with short notes about what changes were made in the last iteration. This is particularly helpful when you are colaborating on a project with other programmers and need to stay tidy while working on the same files.\nGithub is a free web service for storing your version controlled code in the cloud. It allows you to access your code from anywhere and it provides a handy interface for tracking your code‚Äôs changes over time. It also happens to have a handy service for hosting static websites for free on their platform.\nIn this task you will create a github account, create a repository, and clone that repository onto your local machine in Rstudio."
  },
  {
    "objectID": "lessons/unit_02/Lesson_04/quarto_website.html",
    "href": "lessons/unit_02/Lesson_04/quarto_website.html",
    "title": "Lesson 04: Creating Your First Website with Quarto",
    "section": "",

    "text": "Understand the concepts of Git and its functionality.\nLearn the benefits of using Git for version control.\nIdentify the basic Git workflows, including cloning, committing, pushing, branching, and merging.\nGain practical knowledge of setting up and using Git within VScode."
  },
  {
    "objectID": "lessons/unit_02/lesson_03/lesson_03.html#for-windows-users",
    "href": "lessons/unit_02/lesson_03/lesson_03.html#for-windows-users",
    "title": "Lesson 3: Git and How to connect to VScode",
    "section": "1. For Windows Users",
    "text": "1. For Windows Users\nDownload the Git Installer:\n\nVisit the Git website and download the latest version of Git for Windows.\nThe download should automatically start based on your Windows version.\n\nRun the Installer:\nOpen the downloaded file to start the installation. You will be greeted with the Git Setup wizard.\nInstallation Options: Follow the setup instructions. You can leave most options at their default settings. When prompted to choose the default editor, you may select the one you‚Äôre most comfortable with (e.g., VSCode, Notepad++, etc.).\nAdjusting Your PATH Environment: During the installation, you‚Äôll be asked to adjust your PATH environment. Select ‚ÄúUse Git from the Windows Command Prompt‚Äù for ease of use.\nConfiguring the Line Ending Conversions:\nChoose how you want Git to treat line endings in text files. The recommended setting for Windows users is ‚ÄúCheckout Windows-style, commit Unix-style line endings‚Äù.\nCompleting the Installation: Proceed with the installation. Once completed, click ‚ÄòFinish‚Äô.\nVerify Installation:\nOpen Command Prompt and type\n    git --version\nto ensure Git is installed correctly and to see the installed version."
  },
  {
    "objectID": "lessons/unit_02/lesson_03/lesson_03.html#for-macos-users",
    "href": "lessons/unit_02/lesson_03/lesson_03.html#for-macos-users",
    "title": "Lesson 3: Git and How to connect to VScode",
    "section": "2. For MacOS Users",
    "text": "2. For MacOS Users\nInstall Git via Homebrew: If you have Homebrew (a package manager for macOS), you can install Git by opening the Terminal and typing\n    brew install git\nInstall Git from the Official Website:\nAlternatively, you can download the macOS Git installer from Git‚Äôs official site. Open the downloaded file and follow the installation instructions.\nVerify Installation: In the Terminal, type\n    git --version\nto check the installation."
  },
  {
    "objectID": "lessons/unit_02/lesson_03/lesson_03.html#for-linux-users",
    "href": "lessons/unit_02/lesson_03/lesson_03.html#for-linux-users",
    "title": "Lesson 3: Git and How to connect to VScode",
    "section": "3. For Linux Users",
    "text": "3. For Linux Users\nInstall Git through Package Manager:\n\nFor Debian/Ubuntu-based distributions, open the Terminal and type\n\n    sudo apt-get install git\n\nFor Fedora, users\n\n    sudo dnf install git\n\nFor other distributions, use the respective package manager and the package named ‚Äògit‚Äô.\n\nVerify Installation: Confirm the installation by typing in the terminal.\n    git --version"

  },
  {
    "objectID": "lessons/unit_02/lesson_02/lesson_02.html",
    "href": "lessons/unit_02/lesson_02/lesson_02.html",
    "title": "Lesson 2: Installing Quarto",
    "section": "",
    "text": "This lesson will briefly explain Quarto and go over the steps necessary to create a install Quarto in Visual Studio Code (VScode)"
  },
  {
    "objectID": "lessons/unit_02/lesson_02/lesson_02.html#overview",
    "href": "lessons/unit_02/lesson_02/lesson_02.html#overview",
    "title": "Lesson 2: Installing Quarto",
    "section": "",
    "text": "This lesson will briefly explain Quarto and go over the steps necessary to create a install Quarto in Visual Studio Code (VScode)"
  },
  {
    "objectID": "lessons/unit_02/lesson_02/lesson_02.html#learning-objectives",
    "href": "lessons/unit_02/lesson_02/lesson_02.html#learning-objectives",
    "title": "Lesson 2: Installing Quarto",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nStudents will have a general idea of what quarto is and its uses.\nStudents will be able to download quarto.\nStudents will be able to install quarto.\nStudents will be able to preview quarto documents."
  },
  {
    "objectID": "lessons/unit_02/lesson_02/lesson_02.html#lesson",
    "href": "lessons/unit_02/lesson_02/lesson_02.html#lesson",
    "title": "Lesson 2: Installing Quarto",
    "section": "Lesson",
    "text": "Lesson\n\nA Quarto Overview\nQuarto is a dynamic open-source publishing system made to simplify the process of creating easily reproducible reports, articles, research,HTML, and other print and non-print documents. It is built on top of the exceptionally powerful Pandoc converter and uses a language syntax very similar to R markdown and other flavours of markdown.\nUnlike R markdown, Quarto is not tied to a specific language, infact it was made to be multi-lingual. As such, it supports Python, Julia, and Observable among others. The benefits of Quarto can be summarized as:\n\nDynamic Documents: Like R Markdown, Quarto allows you to create dynamic documents where you can embed code, text, and visualizations.\nMultilingual Support: Quarto supports multiple programming languages, making it versatile for different types of analysis. It‚Äôs not limited to R; you can use Python, Julia, and more.\nInteractive Documents: Quarto supports interactive documents with features like interactive graphics and code blocks. The document output can be PDF, EPUB, HTML, DOC, etcetera.\nReproducibility and Collaboration: Quarto emphasizes reproducibility by capturing the code, data, and dependencies needed to reproduce the document‚Äôs content. This makes it a powerful way for people to collaborate on projects as everyone can view everything about a report on a single doument.\n\n\nLinks\n\nhttps://quarto.org/\nhttps://www.infoworld.com/article/3666743/\nhttps://aeturrell.github.io/coding-for-economists/\nhttps://appsilon.com/interactive-clinical-reports-shiny-and-quarto/\n\n\n\n\nStep 01: Find and Download Quarto\n\n\n\nQuarto Download Page\n\n\n\nNavigate to the Quarto download page.\nOr use this link to access a static download.\nFor windows, click on the large blue link at the top of the page and the download should start.\nFor Mac OS, scroll down and click on the download link for Mac OS.\n\n\n\nStep 02: Install Quarto (For Windows)\n\nClick on the downloaded msi file. The setup wizard will start.\n\n\n\nClick next.\nIf you want all users on your computer to have access to Quarto select the radio button beside Install for all users of this machine, else, change nothing and just click next.\n\n\n\nClick next.\nLeave the install path as the default.\n\n\n\nClick next.\nThe installation will start. Wait for it to complete (Please do not turn of your system)\nWhen a message comes up, click on Finish.\n\n\n\n\nCongratulations üéâüòé\nYou have successfully installed Quarto\n\n\nStep 3: Enable Quarto Extension in VScode\n\nOpen vscode and click on the Extensions widget on the left panel of vscode.\n\n\n\nSearch for Quarto and click on the blue install button.\n\n\n\n\nStep 4: Rendering/Previewing Quarto files\n\nCreate a quarto file by clicking the file at the top-left in vscode and then selecting New File.. from the drop-down.\nFrom the new drop-down, select Quarto Document. A new untitled quarto document will be created with the following content:\n\n---\ntitle: \"Untitled\"\nformat: html\n---\n\nEdit and add content to your quarto file to make it look like this:\n\n---\ntitle: \"My First Quarto Code\"\nformat: html\n---\n\n### My name is {type your name here}\nI just finished installing quarto on **{input the date here}**\n\nClick on the preview button on the top-right of vscode. A dialog will pop up.\nName your file test.qmd (qmd is the file extension name for a quarto file) and click on save.\nClick the preview button again. A few things will run in the terminal. A preview panel will open on the right of vscode. The result should resemble the picture below (Except the name and date will be different)."
  },
  {
    "objectID": "lessons/unit_02/lesson_02/lesson_02.html#practice-activity",
    "href": "lessons/unit_02/lesson_02/lesson_02.html#practice-activity",
    "title": "Lesson 2: Installing Quarto",
    "section": "Practice Activity",
    "text": "Practice Activity\n\nMake a video explaining what you know about quarto and share your video with a classmate.\nDownload and install Quarto.\nCreate a new Quarto (.qmd) file and preview it.\nTake a screenshot of your screen (with the preview) and share to your group."
  },
  {
    "objectID": "lessons/unit_02/lesson_02/lesson_02.html#conclusion",
    "href": "lessons/unit_02/lesson_02/lesson_02.html#conclusion",
    "title": "Lesson 2: Installing Quarto",
    "section": "Conclusion",
    "text": "Conclusion\nYou should now have quarto installed and should have created a new quarto document. Quarto is a quick way to create a static webpage without having to understand HTML in detail."
  },
  {
    "objectID": "lessons/unit_02/lesson_02/lesson_02.html#installing-quarto---video-walkthrough-for-macos-users",
    "href": "lessons/unit_02/lesson_02/lesson_02.html#installing-quarto---video-walkthrough-for-macos-users",
    "title": "Lesson 2: Installing Quarto",
    "section": "Installing Quarto - Video Walkthrough (For MacOS Users)",
    "text": "Installing Quarto - Video Walkthrough (For MacOS Users)"
  },
  {
    "objectID": "lessons/unit_02/lesson_02/lesson_02.html#conclusion-1",
    "href": "lessons/unit_02/lesson_02/lesson_02.html#conclusion-1",
    "title": "Lesson 2: Installing Quarto",
    "section": "Conclusion",
    "text": "Conclusion\nYou should now have a basic understanding of the capabilities and use cases of Quarto. In future lessons you will utilize markdown to create web content and other documents."
  },
  {
    "objectID": "lessons/unit_02/lesson_02/lesson_02.html#faq",
    "href": "lessons/unit_02/lesson_02/lesson_02.html#faq",
    "title": "Lesson 2: Installing Quarto",
    "section": "FAQ",
    "text": "FAQ\n\nI cannot access the quarto download. What do I do?\nUse a free VPN on your device and change the location to somewhere in the United States. You can also use the static download availabel at the top of this webpage."
  },
  {
    "objectID": "lessons/unit_01/lesson_04/lesson_04.html",
    "href": "lessons/unit_01/lesson_04/lesson_04.html",
    "title": "Lesson 4: Additional Profile README Features",
    "section": "",
    "text": "This page will help you know what to include on your github profile readme. All these are ideas. Use this code as needed in your profile. On the left is what the section will look like. On the right is the code used to make the section on the right. Copy the code and put it into your profile, editing it as needed to fit you."
  },
  {
    "objectID": "lessons/unit_01/lesson_04/lesson_04.html#overview",
    "href": "lessons/unit_01/lesson_04/lesson_04.html#overview",
    "title": "Lesson 4: Additional Profile README Features",
    "section": "",
    "text": "This page will help you know what to include on your github profile readme. All these are ideas. Use this code as needed in your profile. On the left is what the section will look like. On the right is the code used to make the section on the right. Copy the code and put it into your profile, editing it as needed to fit you."
  },
  {
    "objectID": "lessons/unit_01/lesson_04/lesson_04.html#learning-objectives",
    "href": "lessons/unit_01/lesson_04/lesson_04.html#learning-objectives",
    "title": "Lesson 4: Additional Profile README Features",
    "section": "",
    "text": "Students will be able to create a GitHUb Profile README customized to their unique sensibilities and needs"
  },
  {
    "objectID": "lessons/unit_01/lesson_04/lesson_04.html#lesson",
    "href": "lessons/unit_01/lesson_04/lesson_04.html#lesson",
    "title": "Lesson 4: Additional Profile README Features",
    "section": "Lesson",
    "text": "Lesson\n\nHow to make a good GitHub profile README?\nTo create an impactful GitHub profile README, focus on an engaging presentation of your skills and projects. Begin with a brief introduction, including your name, role, and a touch of personalization to make it relatable.\nNext, showcase your work by organizing sections with project thumbnails, titles, descriptions, and links to your repositories or deployed applications. Consider incorporating GitHub Readme Stats or widgets to display your GitHub activity, lending credibility to your contributions. List your skills and technologies to give viewers insight into your expertise. Highlight significant achievements and contributions, and provide contact information for networking and collaboration opportunities.\nKeep your README updated as you embark on new projects or attain milestones, and encourage engagement from visitors by including a call to action.\n\n\nName Section:\nThis will go best at the top of your profile readme. Paste this code at the top.\n\nMarkdown\n\n\n\n\n\nJohn Doe\n\n\n\n\n# John Doe\n\n\n\nHTML\n\n\n\nJohn Doe\n\n\n\n\n&lt;h1&gt; John Doe &lt;/h1&gt;"
  },
  {
    "objectID": "lessons/unit_01/lesson_04/lesson_04.html#description-section",
    "href": "lessons/unit_01/lesson_04/lesson_04.html#description-section",
    "title": "Lesson 4: Additional Profile README Features",
    "section": "Description Section:",
    "text": "Description Section:\nWriting a description section is very important. Here is where you can make yourself stand out from others to employers. Below are ideas of what to include. Feel free to include anything that conveys that you are a capable employee in your field.\nProvide a brief introduction about yourself, your current academic pursuits, and your career goals. Mention your passion for technology and the specific field you‚Äôre interested in (data science, computer science, web development).\n\n\n\nDescription:\n\nüî≠ I‚Äôm currently working on [Current Project/Job].\nüå± I‚Äôm currently learning [What you are learning].\nüëØ I‚Äôm looking to collaborate on [Open Source Projects or any interesting projects].\nü§î I‚Äôm looking for help with [Any specific help you need].\nüí¨ Ask me about [Anything you‚Äôre open to discussions about].\nüì´ How to reach me: [Your Email or other contact information].\n‚ö° Fun fact: [Something interesting about yourself].\n\n\n\n\n\n\n## Description: \n\n- üî≠ I‚Äôm currently working on [Current Project/Job].\n- üå± I‚Äôm currently learning [What you are learning].\n- üëØ I‚Äôm looking to collaborate on [Open Source Projects or any interesting projects].\n- ü§î I‚Äôm looking for help with [Any specific help you need].\n- üí¨ Ask me about [Anything you're open to discussions about].\n- üì´ How to reach me: [Your Email or other contact information].\n- ‚ö° Fun fact: [Something interesting about yourself]."
  },
  {
    "objectID": "lessons/unit_01/lesson_04/lesson_04.html#hard-skills-section",
    "href": "lessons/unit_01/lesson_04/lesson_04.html#hard-skills-section",
    "title": "Lesson 4: Additional Profile README Features",
    "section": "Hard Skills Section",
    "text": "Hard Skills Section\nThis section is where you can show what you are comfortable using. As a beginner, this section can be empty. For more experienced students, it‚Äôs a good idea to include the technology you are familiar with. Areas to include are:\n\nprogramming languages: (python, JavaScript, C++‚Ä¶)\nhosting services: (Heroku, GitHub Pages, AWS‚Ä¶)\nframeworks/libraries: (pandas, tensorflow, ggplot2, ReactJS‚Ä¶)\ndatabases: (MSSQL, Postgres‚Ä¶)\n\nor anything else that would help what technology you are comfotable using like Git/GitHub, Quarto which we will be learning later in this course.\nThe example below is table showing technology a Data Science student might be familiar with.\n\n\n\nFavorite Technology\n\n\n\n\nPython\nR\n\n\n\n\nReading\nPandas\nReadr\n\n\nWrangling\nPandas\nTidyr & Dplyr\n\n\nVisualization\nMatplotlib\nggplot2\n\n\nModel\nScitkit-Learn\nTidyModels\n\n\n\n\n\n\n\n\n## Favorite Technology\n\n|               | Python        | R             |\n| ---           | :---:         | :---:         |\n| Reading       | Pandas        | Readr         |\n| Wrangling     | Pandas        | Tidyr & Dplyr |\n| Visualization | Matplotlib    | ggplot2       |\n| Model         | Scitkit-Learn | TidyModels    |"
  },
  {
    "objectID": "lessons/unit_01/lesson_04/lesson_04.html#adding-logos-software-lanugages-companies",
    "href": "lessons/unit_01/lesson_04/lesson_04.html#adding-logos-software-lanugages-companies",
    "title": "Lesson 4: Additional Profile README Features",
    "section": "Adding Logos (Software, Lanugages, Companies‚Ä¶)",
    "text": "Adding Logos (Software, Lanugages, Companies‚Ä¶)\nNow, we will add images representing the technologies and skills you are familiar with. You can always finds free logos for many programming languages and tools in DevIcons Github Repository.\nGo to the icons folder and search and open the Pandas folder. In the folder, you‚Äôll find images in SVG(Scaleable Vector Graphics) format. Click on any image and copy the URL shown in the browser‚Äôs address bar \nWe will make use of this URL in the &lt;img /&gt; tag and specify the height and width attribute accordingly. Similarly, you can search for other skills and include them in a seprate &lt;img /&gt; tags.\nInclude the code below to your Github README.md. You can Add/Remove any skills of your choice. Ensure any skill you choose to show on your repo, they should be ones you are conversant with.\n\n\n\n\n              \n\n\n\n\n&lt;div&gt;\n    &lt;img src=\"https://github.com/devicons/devicon/blob/master/icons/java/java-original-wordmark.svg\" title=\"Java\" alt=\"Java\" width=\"40\" height=\"40\"/&gt;&nbsp;\n    &lt;img src=\"https://github.com/devicons/devicon/blob/master/icons/react/react-original-wordmark.svg\" title=\"React\" alt=\"React\" width=\"40\" height=\"40\"/&gt;&nbsp;\n    &lt;img src=\"https://github.com/devicons/devicon/blob/master/icons/spring/spring-original-wordmark.svg\" title=\"Spring\" alt=\"Spring\" width=\"40\" height=\"40\"/&gt;&nbsp;\n    &lt;img src=\"https://github.com/devicons/devicon/blob/master/icons/materialui/materialui-original.svg\" title=\"Material UI\" alt=\"Material UI\" width=\"40\" height=\"40\"/&gt;&nbsp;\n    &lt;img src=\"https://github.com/devicons/devicon/blob/master/icons/flutter/flutter-original.svg\" title=\"Flutter\" alt=\"Flutter\" width=\"40\" height=\"40\"/&gt;&nbsp;\n    &lt;img src=\"https://github.com/devicons/devicon/blob/master/icons/redux/redux-original.svg\" title=\"Redux\" alt=\"Redux \" width=\"40\" height=\"40\"/&gt;&nbsp;\n    &lt;img src=\"https://github.com/devicons/devicon/blob/master/icons/css3/css3-plain-wordmark.svg\"  title=\"CSS3\" alt=\"CSS\" width=\"40\" height=\"40\"/&gt;&nbsp;\n    &lt;img src=\"https://github.com/devicons/devicon/blob/master/icons/html5/html5-original.svg\" title=\"HTML5\" alt=\"HTML\" width=\"40\" height=\"40\"/&gt;&nbsp;\n    &lt;img src=\"https://github.com/devicons/devicon/blob/master/icons/javascript/javascript-original.svg\" title=\"JavaScript\" alt=\"JavaScript\" width=\"40\" height=\"40\"/&gt;&nbsp;\n    &lt;img src=\"https://github.com/devicons/devicon/blob/master/icons/firebase/firebase-plain-wordmark.svg\" title=\"Firebase\" alt=\"Firebase\" width=\"40\" height=\"40\"/&gt;&nbsp;\n    &lt;img src=\"https://github.com/devicons/devicon/blob/master/icons/gatsby/gatsby-original.svg\" title=\"Gatsby\"  alt=\"Gatsby\" width=\"40\" height=\"40\"/&gt;&nbsp;\n    &lt;img src=\"https://github.com/devicons/devicon/blob/master/icons/mysql/mysql-original-wordmark.svg\" title=\"MySQL\"  alt=\"MySQL\" width=\"40\" height=\"40\"/&gt;&nbsp;\n    &lt;img src=\"https://github.com/devicons/devicon/blob/master/icons/nodejs/nodejs-original-wordmark.svg\" title=\"NodeJS\" alt=\"NodeJS\" width=\"40\" height=\"40\"/&gt;&nbsp;\n    &lt;img src=\"https://github.com/devicons/devicon/blob/master/icons/amazonwebservices/amazonwebservices-plain-wordmark.svg\" title=\"AWS\" alt=\"AWS\" width=\"40\" height=\"40\"/&gt;&nbsp;\n    &lt;img src=\"https://github.com/devicons/devicon/blob/master/icons/git/git-original-wordmark.svg\" title=\"Git\" **alt=\"Git\" width=\"40\" height=\"40\"/&gt;\n&lt;/div&gt;"
  },
  {
    "objectID": "lessons/unit_01/lesson_04/lesson_04.html#adding-social-links-to-your-github-profile-readme",
    "href": "lessons/unit_01/lesson_04/lesson_04.html#adding-social-links-to-your-github-profile-readme",
    "title": "Lesson 4: Additional Profile README Features",
    "section": "Adding Social Links to Your Github Profile README",
    "text": "Adding Social Links to Your Github Profile README\n\nMarkdownHTML\n\n\n\n\n\n\n\n\n\n[![](https://img.shields.io/badge/LinkedIn-blue?style=for-the-badge&logo=linkedin&logoColor=white)](&lt;your-linkedin-profile-url&gt;)\n\n[![](https://img.shields.io/badge/Twitter-blue?style=for-the-badge&logo=twitter&logoColor=white)](&lt;your-twitter-profile-URL&gt;)\n\n\n\n\n\n\n\n     \n\n\n\n\n&lt;div id=\"badges\" align=\"center\"&gt;\n  &lt;a href=\"your-linkedin-URL\"&gt;\n    &lt;img src=\"https://img.shields.io/badge/LinkedIn-blue?style=for-the-badge&logo=linkedin&logoColor=white\" alt=\"LinkedIn Badge\"/&gt;\n  &lt;/a&gt;\n  &lt;a href=\"your-twitter-URL\"&gt;\n    &lt;img src=\"https://img.shields.io/badge/Twitter-blue?style=for-the-badge&logo=twitter&logoColor=white\" alt=\"Twitter Badge\"/&gt;\n  &lt;/a&gt;\n&lt;/div&gt;"
  },
  {
    "objectID": "lessons/unit_01/lesson_04/lesson_04.html#adding-gifs-to-your-github-profile-readme",
    "href": "lessons/unit_01/lesson_04/lesson_04.html#adding-gifs-to-your-github-profile-readme",
    "title": "Lesson 4: Additional Profile README Features",
    "section": "Adding GIFS to Your Github Profile README",
    "text": "Adding GIFS to Your Github Profile README\nOn this section, we will be adding social network badges to your github profile readme. On clicking this badges, it redirects users or visitors to their respective social networking sites. Badges of various social networks like Instagram, Facebook, Twitter, Medium (blog site), etc. But for this section, we shall only focus on two: LinkedIn and Twitter.\nTo get the respective badges for each social networks, we‚Äôll use shields.io which provides various endpoints letting users create and customize social media badges. We‚Äôll use the  URL and pass additional parameters to this URL to get the respective social media badges.\nThe Gif used in this section can be found here. I found this GIF on Giphy, which is full of free GIFs to use.\nGo to the GIF Link and click on the Share button and then Copy GIF Link. We‚Äôll add this copied link to an HTML img tag to display it in the Markdown file. We‚Äôre using the img tag as it‚Äôll help us specify the width of the image.\nIn the Github file editor, replace the README.md file content with the following code:\n\nThe first parameter we will pass is Label(This represents the social network site name that will appear on the badge) and Color (which represents the color of the social network badge respectively). Label-Color\n\nIn the case of our example being LinkedIn and Twitter, their color will be blue.\nWhen the parameters listed above (Label and color) are combined with https://img.shields.io/badge/, the following URLs are created. For LinkedIn, https://img.shields.io/badge/LinkedIn-blue. For Twitter, https://img.shields.io/badge/Twitter-blue.\n\nMarkdownHTML\n\n\n\n\n\n\n\n\n![](https://media.giphy.com/media/hpXdHPfFI5wTABdDx9/giphy.gif)\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;div id=\"header\" align=\"center\"&gt;\n    &lt;img src=\"https://media.giphy.com/media/hpXdHPfFI5wTABdDx9/giphy.gif\" width=\"100\"&gt;\n&lt;/div&gt;"
  },
  {
    "objectID": "lessons/unit_01/lesson_04/lesson_04.html#github-profile-summary-stats-widgits",
    "href": "lessons/unit_01/lesson_04/lesson_04.html#github-profile-summary-stats-widgits",
    "title": "Lesson 4: Additional Profile README Features",
    "section": "Github Profile Summary Stats Widgits",
    "text": "Github Profile Summary Stats Widgits\n\nOption 1\n\nMarkdownHTML\n\n\n\n\n\n\n\n\n[![](https://github-readme-stats.vercel.app/api?username=&lt;insert-github-username&gt;)](https://github.com/anuraghazra/github-readme-stats)\n\n\n\n\n\n\n\n\n\n\n&lt;p align=\"center\"&gt;\n  &lt;a href=\"https://git.io/streak-stats](https://github.com/anuraghazra/github-readme-stats\"&gt;\n    &lt;img src=\"https://github-readme-stats.vercel.app/api?username=&lt;insert_github_username&gt;&theme=dark\" alt=\"GitHub profile Streak\" /&gt;\n  &lt;/a&gt;\n&lt;/p&gt;\n\n\n\n\n\n\n\n\nOption 2\n\nMarkdownHTML\n\n\n\n\n\n\n\n\n![](https://streak-stats.demolab.com/?user=&lt;insert_github_username&gt;&theme=dark)\n\n\n\n\n\n\n\n\n\n\n&lt;p align=\"center\"&gt;\n  &lt;a href=\"https://git.io/streak-stats\"&gt;\n    &lt;img src=\"https://streak-stats.demolab.com/?user=&lt;insert_github_username&gt;&theme=dark\" alt=\"GitHub Streak\" /&gt;\n  &lt;/a&gt;\n&lt;/p&gt;\n\n\n\n\n\n\n\nOption 3\n\nMarkdownHTML\n\n\n\n\n\n\n\n\n![](https://github-readme-stats.vercel.app/api/top-langs/?username=&lt;insert_github_username&gt;&theme=dark&layout=compact)\n\n\n\n\n\n\n\n\n\n\n&lt;p align= \"center\"&gt;\n  &lt;img src=\"https://github-readme-stats.vercel.app/api/top-langs/?username=&lt;insert_github_username&gt;&theme=dark&layout=compact\" alt=\"top langs\"/&gt;\n&lt;/p&gt;"
  },
  {
    "objectID": "lessons/unit_01/lesson_04/lesson_04.html#practice-activity",
    "href": "lessons/unit_01/lesson_04/lesson_04.html#practice-activity",
    "title": "Lesson 4: Additional Profile README Features",
    "section": "Practice Activity",
    "text": "Practice Activity\n\nList five texting formatting markdown syntax\nHow can you insert images and links on markdown?\nFrom what you learnt so far, create a Github Profile README file and update your profile accordingly.\nList 5 Markdown emojis and how to insert them in a markdown file\n\nYou should now have your own github profile and should be equipped to help others make one as well. In the next lesson you will learn Github website creation."
  },
  {
    "objectID": "lessons/unit_01/lesson_04/lesson_04.html#notes",
    "href": "lessons/unit_01/lesson_04/lesson_04.html#notes",
    "title": "Lesson 4: Additional Profile README Features",
    "section": "Notes",
    "text": "Notes\nRemember to keep your github profile readme up to date. Treat this page like a resume and portal to your portfolio for employers to find. This is a tool for finding work. Think to yourself, ‚ÄúIf I were an employer, what would I need in an employee?‚Äù. Whatever the answer to that is, convey it in your README."
  },
  {
    "objectID": "lessons/unit_01/lesson_02/lesson_02.html",
    "href": "lessons/unit_01/lesson_02/lesson_02.html",
    "title": "Lesson 2: Creating your GitHub Profile README",
    "section": "",

    "text": "The GitHub profile README serves as a distinctive profile page showcasing who you are and what you do. Functioning as a customizable ‚Äúabout me‚Äù section, it provides an avenue for individuals to introduce themselves, exhibit their projects, and communicate details about their interests and achievements. Essentially, the content of this README defines one‚Äôs GitHub profile, making it a pivotal element for creating a compelling first impression, particularly for employers seeking insights into an individual‚Äôs skills and interests upon visiting their GitHub profile. By the end of this lesson, you will have crafted your own GitHub profile readme using markdown.\nMarkdown is a lightweight and easy-to-use syntax for styling all forms of writing on the web. Markdown is widely used because it allows you to maintain the readability of plain text while offering the styling capabilities of HTML. Our goal is to familiarize you with the foundational elements of Markdown to transform plain text into a rich, well-formatted document.\nThis lesson will be but a brief introduction of markdown. In the next two lessons, you‚Äôll learn how to use Markdown to enhance the visual appeal and structure of your profile, making it easier for others to read and understand the information you share."

  },
  {
    "objectID": "lessons/unit_01/lesson_02/lesson_02.html#overview",
    "href": "lessons/unit_01/lesson_02/lesson_02.html#overview",
    "title": "Lesson 2: Creating your GitHub Profile README",
    "section": "",
    "text": "The GitHub profile README serves as a distinctive profile page showcasing who you are and what you do. Functioning as a customizable ‚Äúabout me‚Äù section, it provides an avenue for individuals to introduce themselves, exhibit their projects, and communicate details about their interests and achievements. Essentially, the content of this README defines one‚Äôs GitHub profile, making it a pivotal element for creating a compelling first impression, particularly for employers seeking insights into an individual‚Äôs skills and interests upon visiting their GitHub profile. By the end of this lesson, you will have crafted your own GitHub profile readme using markdown.\nMarkdown is a lightweight and easy-to-use syntax for styling all forms of writing on the web. Markdown is widely used because it allows you to maintain the readability of plain text while offering the styling capabilities of HTML. Our goal is to familiarize you with the foundational elements of Markdown to transform plain text into a rich, well-formatted document.\nThis lesson will be but a brief introduction of markdown. In the next two lessons, you‚Äôll learn how to use Markdown to enhance the visual appeal and structure of your profile, making it easier for others to read and understand the information you share."
  },
  {
    "objectID": "lessons/unit_01/lesson_02/lesson_02.html#learning-objectives",
    "href": "lessons/unit_01/lesson_02/lesson_02.html#learning-objectives",
    "title": "Lesson 2: Creating your GitHub Profile README",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nStudents will be able to create their own GitHUb profile README\nStudents will be able to recognize and apply markdown syntax to create structured and styled text documents"
  },
  {
    "objectID": "lessons/unit_01/lesson_02/lesson_02.html#lesson",
    "href": "lessons/unit_01/lesson_02/lesson_02.html#lesson",
    "title": "Lesson 2: Creating your GitHub Profile README",
    "section": "Lesson",
    "text": "Lesson\n\nLet‚Äôs Begin Creating a GitHub Profile README\n\nLog in to GitHub.\nClick on + icon at top right of the page and select New Repository.\n\n\n\nA Create a new repository page opens. In the Repository name field, enter your GitHub username. After entering your username, GitHub displays a message describing that you‚Äôre about to create a GitHub special repository.\n\nFor example, if your username is octocat, you would create a repository named octocat.\n\n\nCheck the public checkbox under repository type to make the Github profile README visible to everyone who visits the Github profile page. If you don‚Äôt want users to see your Github profile README while it‚Äôs still in development, you can choose Private. Once done with editing the README, you can go to the repo settings to change it‚Äôs visibilty to Public.\nCheck the Add a README file checkbox. This will add a README.md file where we‚Äôll add the profile contents. The field values should look similar to the image below.\n\n\n\nClick on the Create repository button. A special repository is created successfully. Go to the repository you just created by clicking your profile picture, then ‚ÄúYour repositories‚Äù, and then the repository named after your GitHub profile. You‚Äôll see a README.md file added to the repository.\n\n\nIn the next few sections, we‚Äôll add contents to our README.md file. We‚Äôll use Github‚Äôs file editor to write and preview the changes. There are other text editor which you can use as well such as Vs Code Editor, Sublime Text, Atom etc. But for this lesson, we shall be making use of Github file editor.\nOpen the README.md file and click on the Edit this file icon (a pencil icon) on the top right of the repo page. As highlighted in the image below:\n\n\n\n\nProfile README Template\nCopy and paste this into your GitHub profile readme. Fill out the areas to make it relate to you.\n# &lt;Your Name Here&gt;\n\nHello, GitHub! üëã\n\nI'm &lt;Your Name Here&gt;, a student interested in &lt;Your Profession/Interests such as: computer science, data science, web develpoment, machine learning, data engineering, statistics, software development...&gt;. Welcome to my GitHub profile!\n\n## About Me\n\n- üå± I'm currently learning &lt;Your Current Learning Focus&gt;\n- üí¨ Ask me about &lt;Anything You're Enthusiastic About&gt;\n\n## Technologies and Tools\n\n- üíª Proficient in: &lt;List of Programming Languages or Technologies&gt;\n- üöÄ Skills: &lt;Any Other Skills or Tools You Want to Highlight&gt;\n\n## Let's Connect!\n\n- Here is my [LinkedIn](Your LinkedIn Profile Link) profile\n- Here is my [Twitter](Your Twitter Profile Link) profile\n\nFeel free to explore my repositories and don't hesitate to reach out. Happy coding! üöÄ\n\nIf your name is Chidi Anagonye, a web developer from Senegal, this is what yours would look like:\n\n\nChidi Anagonye\n\nHello, GitHub! üëã\nI‚Äôm Chidi Anagonye, a student interested in web develpoment. Welcome to my GitHub profile!\n\nAbout Me\n\n\nüå± I‚Äôm currently learning the ins and outs of front-end web development, focusing on HTML, CSS, and JavaScript.\nüëØ I‚Äôm eager to to learn new technologies and apply them in web projects!\nüí¨ Ask me about my journey into coding, the latest web technologies, or anything tech-related that you find exciting.\n\n\nTechnologies and Tools\n\n\nüíª Proficient in: HTML, CSS, JavaScript\nüöÄ Skills: Responsive Web Design & Basic Command Line\n\n\nLet‚Äôs Connect!\n\n\nHere is my LinkedIn profile\nHere is my Twitter profile\n\nFeel free to reach out to me. Happy coding! üöÄ\n\nRemember that your GitHub profile is visible to the public, so make sure your customization represents you and your work effectively. This customization not only adds a personal touch to your GitHub presence but also serves as a valuable portfolio for potential collaborators and employers."
  },
  {

    "objectID": "lessons/unit_01/lesson_03/lesson_03.html#tips",
    "href": "lessons/unit_01/lesson_03/lesson_03.html#tips",
    "title": "Lesson 03: Writing in Markdown",
    "section": "Tips",
    "text": "Tips\n\nRefer back to the lesson content for guidance on Markdown syntax. Test your Markdown file by previewing it locally or using online Markdown editors.\nFeel free to explore additional Markdown features not covered in the lesson.\n\nHappy Markdowning! üöÄ"

  },
  {
    "objectID": "lessons/lesson_template.html#conclusion",
    "href": "lessons/lesson_template.html#conclusion",
    "title": "Lesson",
    "section": "Conclusion",

    "text": "Conclusion\nGood job completing this lesson! By now you should:\n\nHave fundamental knowledge of using Markdown\nHave created a README file using Markdown, with an image, a code block and working links."

  },
  {
    "objectID": "lessons/Unit_2/lesson_03.html#how-to-install-git",
    "href": "lessons/Unit_2/lesson_03.html#how-to-install-git",
    "title": "Lesson 3: Git and How to connect to VScode",
    "section": "How to Install Git",
    "text": "How to Install Git\nInstalling Git is a crucial step for anyone getting started with version control. Here‚Äôs a beginner friendly guide to installing Git on different operating systems.\n\n\nFor Windows Users\n\n\nDownload the Git Installer:\n\n\n\nVisit the Git website and download the latest version of Git for Windows.\nThe download should automatically start based on your Windows version.\n\n\nRun the Installer:\n\nOpen the downloaded file to start the installation. You will be greeted with the Git Setup wizard.\n\nInstallation Options:\n\nFollow the setup instructions. You can leave most options at their default settings. When prompted to choose the default editor, you may select the one you‚Äôre most comfortable with (e.g., VSCode, Notepad++, etc.).\n\nAdjusting Your PATH Environment:\n\nDuring the installation, you‚Äôll be asked to adjust your PATH environment. Select ‚ÄúUse Git from the Windows Command Prompt‚Äù for ease of use.\nConfiguring the Line Ending Conversions:\nChoose how you want Git to treat line endings in text files. The recommended setting for Windows users is ‚ÄúCheckout Windows-style, commit Unix-style line endings‚Äù.\nCompleting the Installation: Proceed with the installation. Once completed, click ‚ÄòFinish‚Äô.\n\nVerify Installation:\n\nOpen Command Prompt and type\n    git --version\nto ensure Git is installed correctly and to see the installed version.\n\n\nFor macOS Users\n\n\n\nInstall Git via Homebrew:\n\nIf you have Homebrew (a package manager for macOS), you can install Git by opening the Terminal and typing\n    brew install git\n\nInstall Git from the Official Website:\n\nAlternatively, you can download the macOS Git installer from Git‚Äôs official site. Open the downloaded file and follow the installation instructions.\n\nVerify Installation:\nIn the Terminal, type\n    git --version\nto check the installation.\n\n\nFor Linux Users\n\n\nInstall Git through Package Manager:\n\n\n\nFor Debian/Ubuntu-based distributions, open the Terminal and type\n\n    sudo apt-get install git\n\nFor Fedora, users\n\n    sudo dnf install git\n\nFor other distributions, use the respective package manager and the package named ‚Äògit‚Äô.\n\n\n\nVerify Installation:\nConfirm the installation by typing in the terminal.\n    git --version"
  },
  {
    "objectID": "lessons/Unit_2/lesson_03.html#git-configuration",
    "href": "lessons/Unit_2/lesson_03.html#git-configuration",
    "title": "Lesson 3: Git and How to connect to VScode",
    "section": "Git configuration:",
    "text": "Git configuration:\nAfter installing Git, it‚Äôs a good practice for users to set their Git username and email address, which will be used for every Git commit. This can be done by executing the following commands in the terminal or command prompt:\n    git config --global user.name [your-name]\n    git config --global user.email [your.email@example.com]\nThis steps ensures that all your commits will have your identity attached to them anytime you commit and push to a repo.\n\nBasic Concepts of Git:\n\nRepository(Local and Remote): A repository (or ‚Äòrepo‚Äô) is like a project‚Äôs folder. It contains all of the project files and the history of changes made to those files.\nCommit: A commit is like a snapshot of your repository at a specific point in time. Commits include a message describing what changes were made.\nBranch: A branch in Git is a lightweight, movable pointer to one of these commits. The default branch is named ‚Äòmaster‚Äô.\nMerge: Merging is the process of integrating changes from one branch into another. Working with Git.\nPull Request: Is a feature in Git that allows developers working on a project collaboratively to propose changes to a codebase. It is a way to initiate a discussion and review process"
  },
  {
    "objectID": "lessons/Unit_2/lesson_03.html#repository-local-and-remote",
    "href": "lessons/Unit_2/lesson_03.html#repository-local-and-remote",
    "title": "Lesson 3: Git and How to connect to VScode",
    "section": "1. Repository (Local and Remote)",
    "text": "1. Repository (Local and Remote)\n\nLocal Repository\nDefinition: A local repository in Git is a directory on your computer where Git stores all the files and the history of changes made to those files.\nFunction: It allows you to work on your project and make commits, branches, and other Git operations offline.\n\nCreation and Usage:\nCreated using git init or git clone commands.\nLocal repositories are where you‚Äôll do most of your work, including editing, staging, and committing changes.\nNote: When you initialize or clone a repository on your local mahcine, you will often see a .Git directory as shown below:\n\n\n\n\nRemote Repository\nDefinition: A remote repository is a version of your project hosted on the internet or a network.\nPurpose: It facilitates collaboration, allowing multiple people to push to and pull from the same project.\nCommon Platforms: Platforms like GitHub, GitLab, and Bitbucket host remote repositories.\n\nInteraction:\n\nYou can push your local changes to a remote repository using\n\n    git push\n\nYou can also fetch and merge changes from a remote repository to your local one using\n\n    git pull\n    git fetch\n    git merge"
  },
  {
    "objectID": "lessons/Unit_2/lesson_03.html#commitpush",
    "href": "lessons/Unit_2/lesson_03.html#commitpush",
    "title": "Lesson 3: Git and How to connect to VScode",
    "section": "2. Commit/Push",
    "text": "2. Commit/Push\nDefinition: A commit in Git is a snapshot of your project‚Äôs current state, allowing you to capture the condition of your project at a specific point in time.\nImportance: Commits serve as checkpoints where individual changes can be made permanent to the repository‚Äôs history.\nUsage: To save your staged changes along with a descriptive message, use the code below:\n    git commit -m \"commit message\""
  },
  {
    "objectID": "lessons/Unit_2/lesson_03.html#branch",
    "href": "lessons/Unit_2/lesson_03.html#branch",
    "title": "Lesson 3: Git and How to connect to VScode",
    "section": "3. Branch",
    "text": "3. Branch\nDefinition: A branch in Git represents an independent line of development in a project.\nPurpose: Branches allow you to work on different features or fixes without affecting the main codebase.\nUsage:\n\nCreate a new branch with git branch [branch-name].\n\n    git branch [branch_name]\n\nSwitch between branches using git checkout [branch-name].\n\n    git checkout [branch_name]\n\nTo view all branches available in the Remote Repository\n\n    git branch -a\n\nTo delete a branch on the remote repository\n\n    git push origin --delete [branch-name]\n\nBranch Best Practices:\nUse descriptive names for branches. Create separate branches for different features or bug fixes.\n\n\nGood Branch Naming Convention:\nClear branch names help with organization, understanding the purpose of the branch, and managing multiple branches.\nCommon Naming Strategies - Feature Branches: Name feature branches with a prefix feature/, followed by a short desccriptor (e.g., feature/add-login).\n\nBugfix Branches: For bug fiexes, use a prefix like bugfix/ or fix/ (e.g bugfix/login-error)\nRelease Branches: Release branches can be prefixed with a release/, followed by the version number (e.g., release/1.2.0).\nHotfix Branches: Urgent fixes can use hotfix/ as a prefix, followed by the issue being fiexed (e.g., hotfix/memory-leak).\nPersonal/Branches for Experimentation: Include your name or initials for personal or experimental branches (e.g., jd/test-new-feature).\n\nTips for Branching\nKeep Branches Focused: Each branch should represent a single feature or fix. This makes it easier to review and merge.\nRegularly Update from Main Branch: Frequently merge or rebase your branch with the main branch (like master or main) to stay up-to-date with the latest changes and avoid large merge conflicts.\nPrune Regularly: Delete branches once they are merged and no longer needed to keep the repository clean."
  },
  {
    "objectID": "lessons/Unit_2/lesson_03.html#merge",
    "href": "lessons/Unit_2/lesson_03.html#merge",
    "title": "Lesson 3: Git and How to connect to VScode",
    "section": "4. Merge",
    "text": "4. Merge\nDefinition: Merging in Git is the act of integrating changes from one branch into another.\nApplication: Commonly used to combine the development work of different branches. After testing and approving changes in a feature branch, you merge them into the main branch (often called main).\nProcess: Use\n    git merge [branch-name]\nto merge the changes from [branch-name] into your current branch.\nConflict Resolution: If there are conflicts between the branches, Git will prompt you to resolve them before completing the merge."
  },
  {
    "objectID": "lessons/Unit_2/lesson_03.html#pull-request",
    "href": "lessons/Unit_2/lesson_03.html#pull-request",
    "title": "Lesson 3: Git and How to connect to VScode",
    "section": "5. Pull Request",
    "text": "5. Pull Request\nDefinition: A pull request (PR) is a method of submitting contributions to a project. It‚Äôs specific to platforms like GitHub, GitLab, or Bitbucket.\nPurpose: PRs are a way to inform team members that changes in a branch are ready to be merged into the main branch. They provide a platform for code review and discussion about the changes.\nProcess: Once you push your branch to a remote repository, you can create a pull request through the repository‚Äôs web interface. Other team members can review the changes, provide feedback, and once approved, the changes can be merged into the main branch."

    "text": "Conclusion\n[Wrap-up by restating what should have been learned in this lesson. Then tease other lessons.\nexample: You should now have your own github profile and should be equipped to help others make one as well. In the next lesson you will learn how to add a profile page to your profile that shows others what make you unique and what particular skills you have.]"
  },
  {
    "objectID": "lessons/lesson_template.html#faq",
    "href": "lessons/lesson_template.html#faq",
    "title": "Lesson",
    "section": "FAQ",
    "text": "FAQ\n[This is where we will post common questions students have while doing a lesson along with answers to those questions. This list will likely grow as more students take the course and we learn what they struggle with]\n\nWhat is two-factor authentication?\nTwo-factor authentication is when you use an additional tool to sign into your account such as a text message or an authenticator app. Two factor authentication helps provide an extra layer of security when signing in to keep your data safe. The first factor is almost always your password. The second factor is usually something that a hacker is unlikely to have access to like an authenticator app on your cell-phone."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "Introduction\nWelcome to GitHub Pages Training, a course designed to take you from complete beginner to a website creating machine! In this course we will walk through the basics of using Github, R, and Quarto for website development. If you don‚Äôt know what any of those are, that is OK. We‚Äôll teach you! Just know this, we will collectively use those tools to develop free websites. Along the way you will pick up the fundamental data science skills used by professionals every day.\n\n\nRequired Experience\nThis course assumes that you have no technical experience with website creation, programming, or using GitHub. It does however assume that you have a basic understanding of how to navigate a computer and its file management system.\nYou will be well served by knowing how to find answers to your questions through a search engine like Google. Many say that the best programmers are really just the best googlers.\nSome excellent websites where people post questions and answers to common programming questions are Stack Overflow and GitHub.\n\n\nRequired Materials\nYou will need access to the following materials to complete this course:\n\nA computer with at least 8GB of RAM\nA stable internet connection\nA discord account with access to our discord server\n\n\n\nCourse Structure\nThis course is designed to allow you to complete learning assignments on your own but with some healthy support from our data science team. We will meet for whole team check-ins once a week virtually through zoom. Additionally, we will have a discord server where you can post questions, pictures of your class projects, and assist other learners in our community.\nYou are expected to interact on that discord server over the duration of the course both for your benefit and the benefit of your peers. It‚Äôs also a great place to meet like-minded individuals and grow your network!\nYou will be assigned a data science mentor who can help you with your assignments. Discord will be your primary tool for interacting.\n\n\nCourse Outcomes\n\nWhat you will know by the end\nBy the end of this course you should know how to build a basic, static website using R and hosted for free on Github. You will know how to customize your website and how to add cool things like embedded pictures and videos, interactive charts, and direct links to social platforms like facebook and twitter.\n\nYou will know how to use Github for version control of future coding projects.\nYou will know how to use the R programming language to generate plots and manage data from a variety of sources.\nYou will know how to use Quarto to publish professional reports including websites.\n\n\n\nWhat you will not know by the end\nWhile we hope you feel you can create a custom website from scratch by the end of this course, there will still be some things you won‚Äôt be able to do by the end.\n\nYou won‚Äôt be able to create a dynamic website. A dynamic website is where the contents of the site react differently to each individual user on the site. (Like facebook, google, or youtube)\nYou won‚Äôt known the ins and outs of data science skills like data wrangling or machine learning. (These are saved for future courses)\n\n\n\n\nConclusion\nWe truly hope you enjoy this course and that it serves you on your data science journey. This course is designed to teach you the basic skills you will need to succeed as a data scientist. We do this through a lens of learning how to create websites but with the primary intent of giving you transferable skills to succeed in the world of data science."
  },
  {
    "objectID": "lessons/unit_01/lesson_01/lesson_01.html",
    "href": "lessons/unit_01/lesson_01/lesson_01.html",
    "title": "Lesson 01: Creating a Github Account",
    "section": "",
    "text": "This lesson will go over the steps necessary to create a GitHub account. GitHub is a site that will host repositories fo code for free. It‚Äôs an industry standard tool used by most programmers. In this course it has the added benefit of being the place where we will host the websites we create.\nIn future lessons you will even make a profile page where employers can find you and see what you are working on."
  },
  {
    "objectID": "lessons/unit_01/lesson_01/lesson_01.html#overview",
    "href": "lessons/unit_01/lesson_01/lesson_01.html#overview",
    "title": "Lesson 01: Creating a Github Account",
    "section": "",
    "text": "This lesson will go over the steps necessary to create a GitHub account. GitHub is a site that will host repositories fo code for free. It‚Äôs an industry standard tool used by most programmers. In this course it has the added benefit of being the place where we will host the websites we create.\nIn future lessons you will even make a profile page where employers can find you and see what you are working on."
  },
  {
    "objectID": "lessons/unit_01/lesson_01/lesson_01.html#learning-objectives",
    "href": "lessons/unit_01/lesson_01/lesson_01.html#learning-objectives",
    "title": "Lesson 01: Creating a Github Account",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nStudents will be able to set up a github profile"
  },
  {
    "objectID": "lessons/unit_01/lesson_01/lesson_01.html#lesson",
    "href": "lessons/unit_01/lesson_01/lesson_01.html#lesson",
    "title": "Lesson 01: Creating a Github Account",
    "section": "Lesson",
    "text": "Lesson\n\nStep 01: Find Github\n\nNavigate to Github.com.\nClick on the right side of the pink arrow to enter your email address.\n\n\n\n\nGithub Homepage.\n\n\n\n\nStep 02: Enter Email address, Password, and Username\n\nEnter a valid email address that you have immediate access to. Double check to make sure the email address is valid and that you have access to it.\nIf the continue button turns green, tap it.\nA new section will appear prompting you to input a password. Make sure to follow the password guidelines that will appear at the bottom of the password input area.\nAgain, click on the green continue button.\nA new section will appear prompting you to input a username. Follow the username guidelines that will appear at the bottom of the username input area.\nWhile you do not have to use your real name, please bear in mind that any username you enter is immutable, you WILL NOT HAVE THE OPTION to change it later. A good Github username is one that is easily searchable. This means it will not include long, random string of characters, it will not include overly long or complex numbers, and ideally it is easy to spell when the name is heard phonetically. The username you choose will be searchable and viewable by the public, so make sure it is a name you would like to be associated with your professional brand, now and in the future.\nClick on the green continue button.\nA prompt will appear asking if you want to receive annoucements via email. If you are okay with receiving product email and announcements from Github, enter the letter y, if not, enter the letter n in the input area provided.\nClick on the green continue button.\n\n\n\n\nResults of Step 02.\n\n\n\n\nStep 03: Verifying your account\n\nA new section will drop down asking you to verify your account. Click on the word Verify. It should turn green when you hover over it.\n\n\n\nThe verification challenge would be a picture of a pointing hand on the left, and a picture of an animal on the right. The challenge is to use the ‚¨Ö and ‚û° buttons which are below the picture of an animal to position the animal to face in the direction the hand is pointing.\n\n\n\nYou may have one or two of a similar challenge.\n\n\n\nWhen you are done with the challenge a check mark ‚úÖ will appear.\nNow click on the green create account button that will be at the bottom of the screen.\n\n\n\nA code will be sent to the email address you entered previously.\nOpen you email account and refresh your inbox. You should see a message from Github.\nIf after a while, you still do not see an email from Github, go back to the webpage and tap the link below the Enter code section. The link will be named Resend the code. This will prompt Github to send a new message to your email.\nWhen you receive the email, open it and take note of the numbers there.\nReturn to the Github webpage and input the numbers into the boxes provided.\n\n\n\nIf you have entered the numbers correctly, a new webpage will appear.\n\n\n\nStep 04: Final Setup\n\nYou will be asked two questions\n\nHow many team members will be working with you?\n\nFor this question choose the option 2-5.\n\nAre you a student or teacher?\n\nFor this question choose the option student if you are a student. Choose N/A if you are neither a student nor a teacher.\n\n\n\n\n\nA new webpage will appear asking you some questions. Just click the continue button found at the bottom of the page. \nYou will see a new webpage with two sections, one labelled Free and the other Get Student Benefits.\n\n\n\nFor now, go to the bottom of the page and click Continue for free, even if you are a student. You can get student benefits later.\n\n\n\nWoohoo!! Your Github dashboard should now be open.\n\n\n\n\nStep 05: Edit Profile Picture\nYour profile picture is one of the first things visitors to your Github account will see. Make sure your picture is clean, clear, and professional. However, you do not have to dress in formal attire.\nTo edit your profile picture, do the following while in your github dashboard: - Click on the round picture frame on the top right-hand corner. A panel will open with your username at the top.\n\n\nClick on Your Profile. You will be directed to a new webpage with a bigger picture frame on the left.\n\n\n\nClick on the picture frame. Again you will be taken to yet another webpage but with the picture frame on the right side of the screen. Notice that the picture frame has an edit button on the bottom left.\n\n\n\nClick on the edit buttom. It will reveal an upload button. Click on that and it will bring up a dialog box where you can upload a profile picture that meets the criteria discussed at the beginning of Step 05.\n\n\nCongratulations üéâüòé, You have successfully created a GitHub Account and uploaded an appropriate Profile picture!"
  },
  {
    "objectID": "lessons/unit_01/lesson_01/lesson_01.html#practice-activity",
    "href": "lessons/unit_01/lesson_01/lesson_01.html#practice-activity",
    "title": "Lesson 01: Creating a Github Account",
    "section": "Practice Activity",
    "text": "Practice Activity\n\nCreate a Github account.\nWhen your dashboard opens, take a screen shot of it.\nUpload an appropriate profile picture.\nTake a screenshot of your profile page, showing your profile picture.\nPost both screenshots in your group so your classmates and mentors can see."
  },
  {
    "objectID": "lessons/unit_01/lesson_01/lesson_01.html#video-walkthrough",
    "href": "lessons/unit_01/lesson_01/lesson_01.html#video-walkthrough",
    "title": "Lesson 01: Creating a Github Account",
    "section": "Video Walkthrough",
    "text": "Video Walkthrough"
  },
  {
    "objectID": "lessons/unit_01/lesson_01/lesson_01.html#conclusion",
    "href": "lessons/unit_01/lesson_01/lesson_01.html#conclusion",
    "title": "Lesson 01: Creating a Github Account",
    "section": "Conclusion",
    "text": "Conclusion\nYou should now have your own Github account/profile and should be equipped to help others make one as well. In the next lesson you will learn how to add a profile page to your profile that shows others what make you unique and what particular skills you have."
  },
  {
    "objectID": "lessons/unit_01/lesson_01/lesson_01.html#faq",
    "href": "lessons/unit_01/lesson_01/lesson_01.html#faq",
    "title": "Lesson 01: Creating a Github Account",
    "section": "FAQ",
    "text": "FAQ\n\nWhat is two-factor authentication?\nTwo-factor authentication is when you use an additional tool to sign into your account such as a text message or an authentication app. Two factor authentication helps provide an extra layer of security when signing in to keep your data safe. The first factor is almost always your password. The second factor is usually something that a hacker is unlikely to have access to like an authentication app on your cell-phone.\n\n\nWhat if I fail the picture challenge?\nDon‚Äôt stress. Refresh the webpage and try again.\nUnless you are a robot. Then do stress‚Ä¶"
  },
  {
    "objectID": "lessons/unit_01/lesson_03/lesson_03.html",
    "href": "lessons/unit_01/lesson_03/lesson_03.html",
    "title": "Lesson 03: Writing in Markdown",
    "section": "",
    "text": "You will learn the basics of Markdown, a lightweight markup language that is widely used for formatting plain text. Markdown is commonly used for writing content on platforms like GitHub, where it is essential for creating README files, documentation, and more."
  },
  {
    "objectID": "lessons/unit_01/lesson_03/lesson_03.html#overview",
    "href": "lessons/unit_01/lesson_03/lesson_03.html#overview",
    "title": "Lesson 03: Writing in Markdown",
    "section": "",
    "text": "You will learn the basics of Markdown, a lightweight markup language that is widely used for formatting plain text. Markdown is commonly used for writing content on platforms like GitHub, where it is essential for creating README files, documentation, and more."
  },
  {
    "objectID": "lessons/unit_01/lesson_03/lesson_03.html#learning-objectives",
    "href": "lessons/unit_01/lesson_03/lesson_03.html#learning-objectives",
    "title": "Lesson 03: Writing in Markdown",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nStudents will be able to format plain text using Markdown syntax.\nStudents will be able to write README files using Markdown in GitHub repositories."
  },
  {
    "objectID": "lessons/unit_01/lesson_03/lesson_03.html#lesson",
    "href": "lessons/unit_01/lesson_03/lesson_03.html#lesson",
    "title": "Lesson 03: Writing in Markdown",
    "section": "Lesson",
    "text": "Lesson\n\nWhy Markdown Matters ?\nMarkdown is an incredibly important yet incredibly basic formatting language. Here are a few of the reasons why it matters:\n\nMarkdown can be used for basically everything. It‚Äôs used to create websites, documents, notes, presentations and technical documentation.\nMarkdown is as beginner-friendly as it‚Äôs powerful, portable and platform independent. It can be created on any device running any operating system, using virtually any application.\nMarkdown is everywhere. It‚Äôs supported on GitHub, and lots of desktop and web-based applications.\nMarkdown is future proof. Even if the application you‚Äôre using stops working at some point in the future, you‚Äôll still be able to read your Markdown-formatted text using a text editing application. This is an important consideration when it comes to milestone documents that need to be preserved indefinitely.\n\nIn short, Markdown is a handy, versatile text-formatting tool that you can use to create websites and other text-based documents, which you‚Äôll be using throughout your computer science journey. Knowing how to use it will prove essential as you kickstart your journey.\n\n\nEmphasizing text in Markdown\n\nIn Markdown, the use of asterisks (*) or underscores (_) allows you to emphasize text by making it either italic or bold.\nTo make text italic, wrap it with a single asterisk or underscore on both sides: *italic* or _italic_.\nFor bold text, wrap it with double asterisks or underscores: **bold** or __bold__.\n\n\n\nHeadings in Markdown\n\nHeadings are created using hash (#) symbols. The number of hash symbols determines the level of the heading, with more hash symbols indicating a lower-level heading.\n# Heading 1: This is a top-level heading. It will be rendered as a large, bold heading.\n## Heading 2: This is a second-level heading. It is slightly smaller and less prominent than Heading 1.\n### Heading 3: This is a third-level heading. It is smaller than Heading 2 and is typically used for subsections or less important headings.\n\n\n\nLists in Markdown\n\nYou can create both unordered lists (bullet points) and ordered lists (numbered items)\n\n\nUnordered list\n- Item 1\n- Item 2\n\n\nOrdered list\n1. Ordered Item 1\n2. Ordered Item 2\n\n\n\nCode blocks in Markdown\n\nTo indicate code blocks, use three backticks before and after the block of code. As such:\n\n``` python \n\"insert python code\" \n``` \nYou can do this with any coding language. The output will look like this:\nprint(\"Hello World\")\n\n\nOther common rules\n\nHorizontal Rule\n\nYou can create a horizontal rule by using three consecutive hyphens (‚Äî) or three consecutive asterisks (***).\n\n--- or ***\nThis will produce a horizontal line break in your text like the following:\n\n\n\nLinks\n\nTo create a link, enclose the link text in square brackets and then follow it immediately with the URL in parentheses. As such: [example](https://www.example.com)\n\nThe rendered output looks like this: My example link is example\n\n\nImages\n\nTo add an image, add an exclamation mark (!), followed by alt text in brackets, and the path or URL to the image asset in parentheses. You can optionally add a title in quotation marks after the path or URL. As such: ![alt text](/path/to/image.jpg)\n\nThe rendered output looks like this:\n\n\n\nA River"
  },
  {
    "objectID": "lessons/unit_01/lesson_03/lesson_03.html#practice-activity",
    "href": "lessons/unit_01/lesson_03/lesson_03.html#practice-activity",
    "title": "Lesson 03: Writing in Markdown",
    "section": "Practice Activity",
    "text": "Practice Activity\n\nGitHub Profile Setup:\n\nIf you don‚Äôt have a GitHub account, sign up for one here. Refer to Lesson 1 guide.\nCreate a new repository with the name ‚ÄúMarkdown Practice‚Äù.\nAdd a short description and initialize it with a README.\n\n\n\nMarkdown README:\n\nEdit the README file in your repository using the GitHub online editor.\n\n\nTasks\n\nHeadings\n\n\nCreate a top-level heading with the text ‚ÄúHello World.‚Äù\nAdd a second-level heading with the text ‚ÄúThis is my Markdown Journey.‚Äù\nInclude a third-level heading with the text ‚ÄúHere We Go.‚Äù\n\n\nEmphasize Text\n\n\nWrite your full name in bold letters\nWrite your full name again this time in italics\n\n\nLists\n\n\nCreate an unordered list of your favorite hobbies.(list 3 of them)\nCreate an ordered list of a simple task one can do.\n\nHere is an example\n\nHow to make Peanut Butter and Jam Sandwich\n\nGather ingredients and tools: Bread, Peanut Butter, Jelly or Jam, Butter knife, Plate.\nPrepare the workspace: Lay out a clean surface.\nSpread Peanut Butter on one slice.\nSpread Jelly on the other slice.\nCombine the slices to make a sandwich.\nServe and Enjoy.\n\nDo not use the example task given above find another.\n\nCode Blocks\n\n\nWrite a small Python code snippet inside a code block that prints ‚ÄúMarkdown is fun!‚Äù\n\n\nLinks\n\n\nWrite a small Python code snippet inside a code block that prints ‚ÄúMarkdown is fun!‚Äù\n\n\nAdd an image\n\n\nTwo options: save an image of your choice in the folder that you are currently working on, then add that image on your markdown, another option is to copy an image address of an image on the internet of your choice and add it to your markdown.\n\n\n\n\n\nTips\n\nRefer back to the lesson content for guidance on Markdown syntax. Test your Markdown file by previewing it locally or using online Markdown editors.\nFeel free to explore additional Markdown features not covered in the lesson.\n\nHappy Markdowning! üöÄ"
  },
  {
    "objectID": "lessons/unit_01/lesson_03/lesson_03.html#conclusion",
    "href": "lessons/unit_01/lesson_03/lesson_03.html#conclusion",
    "title": "Lesson 03: Writing in Markdown",
    "section": "Conclusion",
    "text": "Conclusion\nGood job completing this lesson! By now you should:\n\nHave fundamental knowledge of using Markdown\nHave created a README file using Markdown, with an image, a code block and working links.\n\nIn the next lesson you will learn how to host websites on Github."
  },
  {
    "objectID": "lessons/unit_01/lesson_03/lesson_03.html#faq",
    "href": "lessons/unit_01/lesson_03/lesson_03.html#faq",
    "title": "Lesson 03: Writing in Markdown",
    "section": "FAQ",
    "text": "FAQ"
  },
  {
    "objectID": "lessons/unit_01/lesson_03/lesson_03.html#resources",
    "href": "lessons/unit_01/lesson_03/lesson_03.html#resources",
    "title": "Lesson 03: Writing in Markdown",
    "section": "Resources",
    "text": "Resources\nMarkdown Cheatsheet\nInteractive Markdown Tutorial"
  },
  {
    "objectID": "lessons/unit_02/lesson_01/lesson_01.html",
    "href": "lessons/unit_02/lesson_01/lesson_01.html",
    "title": "Lesson 01 : Introduction to Visual Studio Code",
    "section": "",
    "text": "In this lesson, we‚Äôll go over an Integrated Development Enviroment (IDE) known as Visual Studio Code, also commonly referred to as VS Code. We‚Äôll explore what an IDE - such as Visual Studio Code - is, benefits of using it, and in and out‚Äôs of using Visual Studio Code."
  },
  {
    "objectID": "lessons/unit_02/lesson_01/lesson_01.html#overview",
    "href": "lessons/unit_02/lesson_01/lesson_01.html#overview",
    "title": "Lesson 01 : Introduction to Visual Studio Code",
    "section": "",
    "text": "In this lesson, we‚Äôll go over an Integrated Development Enviroment (IDE) known as Visual Studio Code, also commonly referred to as VS Code. We‚Äôll explore what an IDE - such as Visual Studio Code - is, benefits of using it, and in and out‚Äôs of using Visual Studio Code."
  },
  {
    "objectID": "lessons/unit_02/lesson_01/lesson_01.html#learning-objectives",
    "href": "lessons/unit_02/lesson_01/lesson_01.html#learning-objectives",
    "title": "Lesson 01 : Introduction to Visual Studio Code",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nStudents will understand what VS Code is and why they should use it.\nStudents will know how to download extensions and use VS Code to write source code."
  },
  {
    "objectID": "lessons/unit_02/lesson_01/lesson_01.html#lesson",
    "href": "lessons/unit_02/lesson_01/lesson_01.html#lesson",
    "title": "Lesson 01 : Introduction to Visual Studio Code",
    "section": "Lesson",
    "text": "Lesson\n\nWhat is Visual Studio Code ?\n\nVisual Studio Code is a Integrated Development Enviroment (IDE) developed by Microsoft for Windows, Linux and macOS. An integrated development environment or IDE is a software for building applications. An IDE is just like a text editor except instead of writing documents you‚Äôre writing source-code. Visual Studio Code includes features such as syntax highlighting, error highlighting, intelligent code completion, snippets, code refactoring, and embedded Git. Users can change the theme, keyboard shortcuts, preferences, install extensions that add functionality, and has support for different programming languages.\n\nSyntax Highlighting\nTo improve readability for developers, VS Code has syntax highlighting. What this means, is that special keywords of the programming language are highlighted in different colors so that the developer can quickly differentiate these keywords from other texts. For example, if you‚Äôre writing Python code without syntax highlighting, it could be harder to identify keywords from other texts. With syntax highlighting, that gets much easier because the Python keywords and variables are colored differently.\n\n\n\nError Highlighting\nJust like checking spelling in a text document, IDEs can highlight mistakes you make in your programming code. For example, if I delete the equal symbol where it‚Äôs needed, my IDE will highlight the error.\n\n\nIntelligent Code Completion\nWhen you‚Äôre typing a message on your phone, it suggests words as you type. Visual Studio Code‚Äôs code completion is a similar feature. Since programming languages have special keywords, it can offer suggestions to autocomplete words as you start typing them. Together with IntelliSense, this makes the IDE smart and even able to understand your code. They can detect variables and functions and offer them as suggestions during autocomplete. For example, if I have a Python function named myFunction defined at the top of the Python file, then as soon as I start typing the letter m my IDE suggest this function as an autocompletion. This speeds up the process of coding applications by reducing typos and other common mistakes.\n\n\n\nCode Refactoring\nSince IDEs understand your code, they can help you if you need to change it. To demonstrate how refactoring works, let‚Äôs continue with the myFunction function that I defined a moment ago. In the code, the function is then called multiple times. It can also be called in the code of other files too. But what if you need to rename this function? You would need to rename it in every file that uses the function ensuring that you update those files to use the new name. This process is known as refactoring, changing the structure of the code without changing the functionality. Doing this manually is very time consuming and prone to error. If you mistyped the new function name in one place, the application will break. Since the IDE understand your code, it can assist with refactoring and automatically update the function name across all files.\n\n\nSnippets\nCode snippets are small blocks of reusable code that you can add to a code file by using the right-click context menu command or a combination of hotkeys. This saves time and ensures consistency on routine operations. Snippets make it easier to remember specific formatting for functions and can be shared amomg a team to ensure no one is doubling down on the same work.\n\n\n\nGit\nGit is a version control system that tracks changes in any set of computer files, usually used for coordinating work among developers who are collaboratively developing source code during software development. You‚Äôll learn more on Git in Lesson 3. For now, it‚Äôs good to know that Visual Studio code has built-in support for Git through Source Control and the terminal.\n\nVS Code has a host of extensions and plugins that add various functionality to aid rapid software development."
  },
  {
    "objectID": "lessons/unit_02/lesson_01/lesson_01.html#practice-activity",
    "href": "lessons/unit_02/lesson_01/lesson_01.html#practice-activity",
    "title": "Lesson 01 : Introduction to Visual Studio Code",
    "section": "Practice Activity",
    "text": "Practice Activity\n\nDownload and Install Visual Studio Code\n\nPrerequisites\n\nVS Code is lightweight and should run on most available hardware and platform versions. You can review the System Requirements to check if your computer configuration is supported.\n\n\n\nFor Windows PC\n\nVisit the official website of Visual Studio Code using any web browser like Google Chrome, Microsoft Edge, etc.\nClick the ‚ÄúWindows‚Äù button under the Windows logo on the website to start the download of the Visual Studio Code Application.\n\n\n\nWhen the download finishes, click on the installer icon in the downloads folder to start the installation process of the Visual Studio Code.\n\n\n\nAfter the Installer opens, it will ask you for accepting the terms and conditions of the Visual Studio Code. Click on I accept the agreement and then click the Next&gt; button.\n\n\n\nProceed through the installation process by clicking on the ‚Äúnext‚Äù button at each prompt.\nAt this prompt, optionally check the boxes for ‚ÄúCreating a desktop icon‚Äù, and adding VS Code to the Right-Click menu functionality of Windows File Explorer, then click Next &gt;.\n\n\n\nConfirm the installation options, then click Install. The installation will proceed.\n\n\n\nClick Finish to exit the installation and (by default) launch Visual Studio Code.\n\n\nYour VS Code is installed on your PC and ready for you to start coding away with it.\n\nYou can always launch it by clicking on the Desktop Icon (if you selected that option during the installation process) or by searching it in the ‚äû Start Menu.\n\n\n\nFor Mac OS\n\nNavigate to the official website of Visual Studio Code using any web browser like Safari, Google Chrome etc.\nClick the ‚ÄúMac‚Äù button under the Apple logo on the website to start the download of the Visual Studio Code Application\n\n\n\nDepending on the browser used and security settings within, there may be prompts to allow access to the Download folder or similar. Allow any prompts that are generated.\n\n\n\nHold down the Command ‚åò key on your keyboard and press the Space Bar and type ‚ÄòDownloads‚Äô in the search field, click on the Downloads Finder icon.\n\n\n\nClick on ‚ÄúDownloads‚Äù on the left side of the Finder window then locate the Visual Studio Code application file. You can click on the Date Added column to sort by newest to help you find the VS Code file.\nClick and drag the Visual Studio Code application to the Applications folder on the left.\n\n\nYour VS Code is installed on your Mac and ready for you to start coding away with it.\n\nYou can launch it by clicking on the Launchpad Icon in the Mac OS dock and then either look for the Visual Studio Code icon, or use the Search bar at the top of the Launchpad.\n\nClick on the Visual Studio Code icon once it has been located.\n\nMac OS will prompt to confirm that opening a program downloaded from the internet was an intended action. Click Open\n\n\n\n\nInstall VS Code‚Äôs Python Extension\nThis is an extension with rich support for the Python programming language, including features such as IntelliSense (Pylance), linting, debugging, code navigation, code formatting, refactoring, and more!\n\nOpen VS Code and navigate to the extention icon on the left pane.\n\n\n\nSearch ‚ÄúPython‚Äù in the search box and select the first item that says ‚ÄúPython‚Äù in the search result and click on install.\n\n\n\nOnce it‚Äôs done installing, your python extension should be good to go."
  },
  {
    "objectID": "lessons/unit_02/lesson_01/lesson_01.html#conclusion",
    "href": "lessons/unit_02/lesson_01/lesson_01.html#conclusion",
    "title": "Lesson 01 : Introduction to Visual Studio Code",
    "section": "Conclusion",
    "text": "Conclusion\nNice work completing this lesson! By now you should:\n\nKnow what Visual Studio Code is, and IDE‚Äôs in general.\nKnow how to and have VS Code installed on your computer.\nKnow how to install and have an extension installed in VS Code.\n\nIn the next lesson, you will learn how to use Quarto - an open-source publishing system, and have the extension installed in VS Code."
  },
  {
    "objectID": "lessons/unit_02/lesson_01/lesson_01.html#faq",
    "href": "lessons/unit_02/lesson_01/lesson_01.html#faq",
    "title": "Lesson 01 : Introduction to Visual Studio Code",
    "section": "FAQ",
    "text": "FAQ"
  },
  {
    "objectID": "lessons/unit_02/lesson_03/lesson_03.html",
    "href": "lessons/unit_02/lesson_03/lesson_03.html",
    "title": "Lesson 3: Git and How to connect to VScode",
    "section": "",
    "text": "Git is a powerful and widely used version control system that allows developers to track changes in their code over time. It was created by Linus Torvalds in 2005 to support the development of the Linux kernel. Git is designed to handle projects of all sizes with speed and efficiency.\nWhy Use Git?\n\nCollaboration: Git makes it easier for multiple people to work on the same project without interfering with each other‚Äôs work. It allows for parallel development, where team members can work on different features simultaneously.\nHistory Tracking: Every change made to the files in a project is tracked. This means you can revert back to any version of a file at any point in time. Branching and Merging: Git‚Äôs branching capabilities are a standout feature. They allow you to diverge from the main line of development and experiment with new ideas without affecting the main project, then merge those changes back in when they‚Äôre ready.\nDistributed Development: Git is a distributed version control system, meaning every developer‚Äôs working copy of the code is also a repository that can contain the full history of all changes. Basic Concepts\nRepository: A repository (or ‚Äòrepo‚Äô) is like a project‚Äôs folder. It contains all of the project files and the history of changes made to those files.\nCommit: A commit is like a snapshot of your repository at a specific point in time. Commits include a message describing what changes were made.\nBranch: A branch in Git is a lightweight, movable pointer to one of these commits. The default branch is named ‚Äòmaster‚Äô.\nMerge: Merging is the process of integrating changes from one branch into another. Working with Git.\n\n\nGit‚Äôs functionality is accessible primarily through the command line. Common commands include;\n\ngit clone,\ngit pull,\ngit push,\ngit branch,\ngit commit,\nand git merge.\n\nGit works well with various platforms like GitHub, GitLab, and Bitbucket, which provide remote repositories and additional collaboration features.\n\n\n\n\n\n\n\nflowchart LR\n    A(Git Clone/Git Init) --&gt; B{Is there branch?}\n    B --&gt; C[Git pull branch-name]\n    B --&gt; D[Git pull main]\n    C --&gt; E[work on changes]\n    D --&gt; E[work on changes]\n    E --&gt; F[Git Add changes]\n    F --&gt; G[Git commit changes]\n    G --&gt; H[git push changes]\n\n\n\n\n\n\n\n\n\nInstalling Git is a crucial step for anyone getting started with version control. Here‚Äôs a beginner friendly guide to installing Git on different operating systems.\n\n\n\n\nVisit the Git website and download the latest version of Git for Windows.\nThe download should automatically start based on your Windows version.\n\n\nOpen the downloaded file to start the installation. You will be greeted with the Git Setup wizard.\n\nFollow the setup instructions. You can leave most options at their default settings. When prompted to choose the default editor, you may select the one you‚Äôre most comfortable with (e.g., VSCode, Notepad++, etc.).\n\nDuring the installation, you‚Äôll be asked to adjust your PATH environment. Select ‚ÄúUse Git from the Windows Command Prompt‚Äù for ease of use.\nConfiguring the Line Ending Conversions:\nChoose how you want Git to treat line endings in text files. The recommended setting for Windows users is ‚ÄúCheckout Windows-style, commit Unix-style line endings‚Äù.\nCompleting the Installation: Proceed with the installation. Once completed, click ‚ÄòFinish‚Äô.\n\nOpen Command Prompt and type\n    git --version\nto ensure Git is installed correctly and to see the installed version.\n\n\n\nIf you have Homebrew (a package manager for macOS), you can install Git by opening the Terminal and typing\n    brew install git\n\nAlternatively, you can download the macOS Git installer from Git‚Äôs official site. Open the downloaded file and follow the installation instructions.\n\n\nIn the Terminal, type\n    git --version\nto check the installation.\n\n\n\n\nFor Debian/Ubuntu-based distributions, open the Terminal and type\n\n    sudo apt-get install git\n\nFor Fedora, users\n\n    sudo dnf install git\n\nFor other distributions, use the respective package manager and the package named ‚Äògit‚Äô.\n\n\n\n\nConfirm the installation by typing in the terminal.\n    git --version\n\n\n\n\n\nAfter installing Git, it‚Äôs a good practice for users to set their Git username and email address, which will be used for every Git commit. This can be done by executing the following commands in the terminal or command prompt:\n    git config --global user.name [your-name]\n    git config --global user.email [your.email@example.com]\nThis steps ensures that all your commits will have your identity attached to them anytime you commit and push to a repo.\n\n\n\nRepository (Local and Remote)\nCommit\nBranch\nMerge\nPull Request\n\n\n\n\n\n\nCommand LineSource Control\n\n\n\n\nDefinition: A local repository in Git is a directory on your computer where Git stores all the files and the history of changes made to those files.\nFunction: It allows you to work on your project and make commits, branches, and other Git operations offline.\n\n\n\n\nCommand Line\n\nCreated using git init or git clone commands.\nLocal repositories are where you‚Äôll do most of your work, including editing, staging, and committing changes.\nNote: When you initialize or clone a repository on your local mahcine, you will often see a .Git directory as shown below:\n\n\n\n\nDefinition: A remote repository is a version of your project hosted on the internet or a network.\nPurpose: It facilitates collaboration, allowing multiple people to push to and pull from the same project.\nCommon Platforms: Platforms like GitHub, GitLab, and Bitbucket host remote repositories.\n\n\n\n\nYou can push your local changes to a remote repository using\n\n    git push\n\nYou can also fetch and merge changes from a remote repository to your local one using\n\n    git pull\n    git fetch\n    git merge\n\n\n\n\n\nTo get a repository from GitHub onto your computer, the repository on GitHub needs to be ‚Äúcloned‚Äù on to your computer. Open a new window in VSCode, source control will look like this.\n\nSteps: - open new window for VSCode - copy the github url for the desired repository - click ‚ÄúClone Repository‚Äù and paste in there\n\n\n\nTo put an existing project of yours onto GitHub, you‚Äôll need to ‚Äúinitialize a repository‚Äù. Open VSCode in that existing project‚Äôs folder, source code will look like this.\n\nSteps:\n\nclick ‚ÄúInitialize Repository‚Äù\n\n\n\n\n\n\n\n\n\nCommand LineSource Control\n\n\nDefinition: A commit in Git is a snapshot of your project‚Äôs current state, allowing you to capture the condition of your project at a specific point in time.\nImportance: Commits serve as checkpoints where individual changes can be made permanent to the repository‚Äôs history.\nUsage: To save your staged changes along with a descriptive message, use the code below:\n    git commit -m \"commit message\" \n\n\n\n\nCommit messages should be clear and concise\ncommit messages should reflect the changes made. i.e ‚Äúupdated file upload function in task.py‚Äù\n\n\n\n\nPurpose: Git push is used whenever we want to push your current commit from your local repository to the remote repository. What this code does under the hood is to push the current state of our codes to the remote repository.\nSyntax\n    git push [branch-name]\nReplace [branch-name] with the name of the branch in which you wish to push the changes to. By default, origin is the name git gives to the remote repository once initialized or cloned. And the default branch name in origin is main\n    git push -u origin main\n\n\n\nTo get your changes from your computer to GitHub, you‚Äôll need to commit and push your changes.\n\nTo commit and push your most recent changes to your files:\n\nsave your file\ntype out a message that reflects your how this version of your code is different from the previous version\nclick ‚ÄúCommit‚Äù\nclick ‚ÄúSync Changes‚Äù\n\n\n\n\n\n\n\n\nCommand LineSource Control\n\n\nDefinition: A branch in Git represents an independent line of development in a project.\nPurpose: Branches allow you to work on different features or fixes without affecting the main codebase.\nUsage:\n\nCreate a new branch with git branch [branch-name].\n\n    git branch [branch_name]\n\nSwitch between branches using git checkout [branch-name].\n\n    git checkout [branch_name]\n\nTo view all branches available in the Remote Repository\n\n    git branch -a\n\nTo delete a branch on the remote repository\n\n    git push origin --delete [branch-name]\n\n\nUse descriptive names for branches. Create separate branches for different features or bug fixes.\n\n\n\nClear branch names help with organization, understanding the purpose of the branch, and managing multiple branches.\n\n\n\nFeature Branches: Name feature branches with a prefix feature/, followed by a short desccriptor (e.g., feature/add-login).\nBugfix Branches: For bug fiexes, use a prefix like bugfix/ or fix/ (e.g bugfix/login-error)\nRelease Branches: Release branches can be prefixed with a release/, followed by the version number (e.g., release/1.2.0).\nHotfix Branches: Urgent fixes can use hotfix/ as a prefix, followed by the issue being fiexed (e.g., hotfix/memory-leak).\nPersonal/Branches for Experimentation: Include your name or initials for personal or experimental branches (e.g., jd/test-new-feature).\n\n\n\n\nKeep Branches Focused: Each branch should represent a single feature or fix. This makes it easier to review and merge.\nRegularly Update from Main Branch: Frequently merge or rebase your branch with the main branch (like master or main) to stay up-to-date with the latest changes and avoid large merge conflicts.\nPrune Regularly: Delete branches once they are merged and no longer needed to keep the repository clean.\n\n\n\n\nTo add your changes to a repository without making it the main version of the code, you can create a ‚Äúbranch‚Äù.\n\nSteps:\n\nSave work, stage file(s), write commit message, and click commit\nClick on the three dots at the top right of the source control pane\nClick ‚ÄúBranch‚Äù\nClick ‚ÄúCreate Branch‚Äù\n\n\n\n\n\n\n\n\nCommand LineSource Control\n\n\nDefinition: Merging in Git is the act of integrating changes from one branch into another.\nApplication: Commonly used to combine the development work of different branches. After testing and approving changes in a feature branch, you merge them into the main branch (often called main).\nProcess: Use\n    git merge [branch-name]\nto merge the changes from [branch-name] into your current branch.\nConflict Resolution: If there are conflicts between the branches, Git will prompt you to resolve them before completing the merge.\n\n\nTo make your branch part of the main version of the code, you‚Äôll have to ‚Äúmerge‚Äù your branch.\n\nSteps:\n\nSave, stage, commit, pull, and push to your work to your branch\nClick on the three dots at the top right of the source control pane\nClick ‚ÄúBranch‚Äù\nClick ‚ÄúMerge Branch‚Äù\n\n\n\n\n\n\n\nDefinition: A pull request (PR) is a method of submitting contributions to a project. It‚Äôs specific to platforms like GitHub, GitLab, or Bitbucket.\nPurpose: PRs are a way to inform team members that changes in a branch are ready to be merged into the main branch. They provide a platform for code review and discussion about the changes.\nProcess: Once you push your branch to a remote repository, you can create a pull request through the repository‚Äôs web interface. Other team members can review the changes, provide feedback, and once approved, the changes can be merged into the main branch."
  },
  {
    "objectID": "lessons/unit_02/lesson_03/lesson_03.html#how-to-install-git",
    "href": "lessons/unit_02/lesson_03/lesson_03.html#how-to-install-git",
    "title": "Lesson 3: Git and How to connect to VScode",
    "section": "",
    "text": "Installing Git is a crucial step for anyone getting started with version control. Here‚Äôs a beginner friendly guide to installing Git on different operating systems.\n\n\n\n\nVisit the Git website and download the latest version of Git for Windows.\nThe download should automatically start based on your Windows version.\n\n\nOpen the downloaded file to start the installation. You will be greeted with the Git Setup wizard.\n\nFollow the setup instructions. You can leave most options at their default settings. When prompted to choose the default editor, you may select the one you‚Äôre most comfortable with (e.g., VSCode, Notepad++, etc.).\n\nDuring the installation, you‚Äôll be asked to adjust your PATH environment. Select ‚ÄúUse Git from the Windows Command Prompt‚Äù for ease of use.\nConfiguring the Line Ending Conversions:\nChoose how you want Git to treat line endings in text files. The recommended setting for Windows users is ‚ÄúCheckout Windows-style, commit Unix-style line endings‚Äù.\nCompleting the Installation: Proceed with the installation. Once completed, click ‚ÄòFinish‚Äô.\n\nOpen Command Prompt and type\n    git --version\nto ensure Git is installed correctly and to see the installed version.\n\n\n\nIf you have Homebrew (a package manager for macOS), you can install Git by opening the Terminal and typing\n    brew install git\n\nAlternatively, you can download the macOS Git installer from Git‚Äôs official site. Open the downloaded file and follow the installation instructions.\n\n\nIn the Terminal, type\n    git --version\nto check the installation.\n\n\n\n\nFor Debian/Ubuntu-based distributions, open the Terminal and type\n\n    sudo apt-get install git\n\nFor Fedora, users\n\n    sudo dnf install git\n\nFor other distributions, use the respective package manager and the package named ‚Äògit‚Äô.\n\n\n\n\nConfirm the installation by typing in the terminal.\n    git --version"
  },
  {
    "objectID": "lessons/unit_02/lesson_03/lesson_03.html#git-configuration",
    "href": "lessons/unit_02/lesson_03/lesson_03.html#git-configuration",
    "title": "Lesson 3: Git and How to connect to VScode",
    "section": "",
    "text": "After installing Git, it‚Äôs a good practice for users to set their Git username and email address, which will be used for every Git commit. This can be done by executing the following commands in the terminal or command prompt:\n    git config --global user.name [your-name]\n    git config --global user.email [your.email@example.com]\nThis steps ensures that all your commits will have your identity attached to them anytime you commit and push to a repo.\n\n\n\nRepository (Local and Remote)\nCommit\nBranch\nMerge\nPull Request"
  },
  {
    "objectID": "lessons/unit_02/lesson_03/lesson_03.html#repository-local-and-remote",
    "href": "lessons/unit_02/lesson_03/lesson_03.html#repository-local-and-remote",
    "title": "Lesson 3: Git and How to connect to VScode",
    "section": "",

    "text": "This page will help you know what to include on your github profile readme. All these are ideas. Use this code as needed in your profile. On the left is what the section will look like. On the right is the code used to make the section on the right. Copy the code and put it into your profile, editing it as needed to fit you.\n\n\nGenerally, A GitHub README is a document that typically accompanies a GitHub repository, providing essential information about the repository and its contents. It‚Äôs named ‚ÄúREADME‚Äù because it‚Äôs often the first thing a visitor should read to understand what the project is about. The importance of a GitHub README cannot be overstated, as it serves several critical functions, but we will only talk about 3 in this lesson.\nKey Features and Importance of a GitHub README:\n\nProject Introduction: It introduces the project to users, developers, or potential contributors. This is where you provide an overview of what the project does and its purpose.\nDocumentation: The README often contains documentation on how to install, configure, and use the project. This can include code examples, configuration settings, and command-line instructions.\nTechnical Details: It may provide technical details such as the technology stack, dependencies, and system requirements.\n\n\n\n\nIn the context of creating a GitHub profile, a GitHub README serves as a personalized introduction and overview of a user‚Äôs GitHub presence. Unlike a repository-specific README that focuses on a particular project, a GitHub profile README provides a broader view of the user, their interests, skills, and contributions.\nKey Features and Importance of a Github Profile README:\n\nPersonal Introduction: A brief section about who you are, what you do, and your interests. This can include your professional role, educational background, or areas of expertise.\nSkills and Technologies: Highlight the programming languages, tools, and technologies you are proficient in. This can be done through text, badges, or icons.\nProjects and Work: Showcase your significant or favorite projects. You can include links to repositories, descriptions of what each project entails, and any notable achievements.\nGitHub Statistics: Some users include dynamic GitHub stats like their number of contributions, most used languages, or streaks. This can be done using GitHub widgets and badges."
  },
  {
    "objectID": "lessons/unit_01/lesson_04/lesson_04.html#hard-skills-section",
    "href": "lessons/unit_01/lesson_04/lesson_04.html#hard-skills-section",
    "title": "Lesson 4: Additional Profile README Features",
    "section": "Hard Skills Section",
    "text": "Hard Skills Section\nThis section is where you can show what you are comfortable using. As a beginner, this section can be empty. For more experienced students, it‚Äôs a good idea to include the technology you are familiar with. Areas to include are:\n\nprogramming languages: (python, JavaScript, C++‚Ä¶)\nhosting services: (Heroku, GitHub Pages, AWS‚Ä¶)\nframeworks/libraries: (pandas, tensorflow, ggplot2, ReactJS‚Ä¶)\ndatabases: (MSSQL, Postgres‚Ä¶)\n\nor anything else that would help what technology you are comfotable using like Git/GitHub, Quarto which we will be learning later in this course.\nThe example below is table showing technology a Data Science student might be familiar with.\n\n\n\nFavorite Technology\n\n\n\n\nPython\nR\n\n\n\n\nReading\nPandas\nReadr\n\n\nWrangling\nPandas\nTidyr & Dplyr\n\n\nVisualization\nMatplotlib\nggplot2\n\n\nModel\nScitkit-Learn\nTidyModels\n\n\n\n\n\n\n\n\n## Favorite Technology\n\n|               | Python        | R             |\n| ---           | :---:         | :---:         |\n| Reading       | Pandas        | Readr         |\n| Wrangling     | Pandas        | Tidyr & Dplyr |\n| Visualization | Matplotlib    | ggplot2       |\n| Model         | Scitkit-Learn | TidyModels    |"

  },
  {
    "objectID": "lessons/unit_02/lesson_05/lesson_05.html#faq",
    "href": "lessons/unit_02/lesson_05/lesson_05.html#faq",
    "title": "CSS Selectors Table",
    "section": "FAQ",
    "text": "FAQ"

  },
  {
    "objectID": "tools/r_installation.html",
    "href": "tools/r_installation.html",
    "title": "R Installation",
    "section": "",
    "text": "What is R?\nR is a programming language developed by Ross Ihaka and Robert Gentleman designed for statistical programming. It is primarily focused on data wrangling and visualization.\nAs the phrase ‚Äúprogramming language‚Äù suggests, R is a language used to instruct a computer to carry out complex commands. Like most any other language you will need to understand its grammar and syntax in order to fluently ‚Äúspeak‚Äù it. The more fluent you become in it, the easier it will be for you to communicate your wants and desires to it.\n\n\nInstalling R\n\nGo to cloud.r-project.org\nClick on the download link for your computer system. For example if you are using a windows computer click ‚ÄúDownload R for Windows‚Äù\nClick on ‚Äúbase‚Äù\nClick on the download version for the current version of R. (At time of writing the button says ‚ÄúDownload R-4.3.1 for Windows‚Äù on a windows computer.) Make sure you know where you save the downloaded file so that you can run the installer.\nNavigate to the downloaded file and run the installer by double clicking. (Usually it is title something like ‚ÄúR-4.3.1-win‚Äù) Follow the steps for the installation wizard. It is highly recommended you just keep the recommended installation settings especially if you haven‚Äôt done this before.\nR should now be properly installed. We‚Äôll show you how to check it properly in the next tutorial ‚ÄúInstalling R Studio‚Äù"

    "objectID": "lessons/unit_01/lesson_04/lesson_04.html#github-profile-summary-stats-widgets",
    "href": "lessons/unit_01/lesson_04/lesson_04.html#github-profile-summary-stats-widgets",
    "title": "Lesson 4: Additional Profile README Features",
    "section": "Github Profile Summary Stats Widgets",
    "text": "Github Profile Summary Stats Widgets\n\nOption 1\n\nMarkdownHTML\n\n\n\n\n\n\n\n\n[![](https://github-readme-stats.vercel.app/api?username=&lt;insert-github-username&gt;)](https://github.com/anuraghazra/github-readme-stats)\n\n\n\n\n\n\n\n\n\n\n&lt;p align=\"center\"&gt;\n  &lt;a href=\"https://git.io/streak-stats](https://github.com/anuraghazra/github-readme-stats\"&gt;\n    &lt;img src=\"https://github-readme-stats.vercel.app/api?username=&lt;insert_github_username&gt;&theme=dark\" alt=\"GitHub profile Streak\" /&gt;\n  &lt;/a&gt;\n&lt;/p&gt;\n\n\n\n\n\n\n\n\nOption 2\n\nMarkdownHTML\n\n\n\n\n\n\n\n\n![](https://streak-stats.demolab.com/?user=&lt;insert_github_username&gt;&theme=dark)\n\n\n\n\n\n\n\n\n\n\n&lt;p align=\"center\"&gt;\n  &lt;a href=\"https://git.io/streak-stats\"&gt;\n    &lt;img src=\"https://streak-stats.demolab.com/?user=&lt;insert_github_username&gt;&theme=dark\" alt=\"GitHub Streak\" /&gt;\n  &lt;/a&gt;\n&lt;/p&gt;\n\n\n\n\n\n\n\nOption 3\n\nMarkdownHTML\n\n\n\n\n\n\n\n\n![](https://github-readme-stats.vercel.app/api/top-langs/?username=&lt;insert_github_username&gt;&theme=dark&layout=compact)\n\n\n\n\n\n\n\n\n\n\n&lt;p align= \"center\"&gt;\n  &lt;img src=\"https://github-readme-stats.vercel.app/api/top-langs/?username=&lt;insert_github_username&gt;&theme=dark&layout=compact\" alt=\"top langs\"/&gt;\n&lt;/p&gt;"
  },
  {
    "objectID": "lessons/unit_01/lesson_04/lesson_04.html#general-definition-of-github-readme-and-its-importance",
    "href": "lessons/unit_01/lesson_04/lesson_04.html#general-definition-of-github-readme-and-its-importance",
    "title": "Lesson 4: Additional Profile README Features",
    "section": "General Definition of Github Readme and it‚Äôs importance",
    "text": "General Definition of Github Readme and it‚Äôs importance"
  },
  {
    "objectID": "lessons/unit_01/lesson_04/lesson_04.html#header-2-for-the-second-largest-and-so-on.",
    "href": "lessons/unit_01/lesson_04/lesson_04.html#header-2-for-the-second-largest-and-so-on.",
    "title": "Lesson 4: Additional Profile README Features",
    "section": "Header 2 for the second-largest, and so on.",
    "text": "Header 2 for the second-largest, and so on.\n  # Header 1\n  ## Header 2\n\nBold Text:\n\nTo make text bold, wrap it in two asterisks ** or two underscores __. For example: bold text or bold text.\n\nItalic Text:\n\nTo italicize text, wrap it in one asterisk * or one underscore _. For example: italic text or italic text.\n\nBold and Italic:\n\nCombine both formats for bold and italic text. For example: bold and italic or bold and italic.\n\nBulleted Lists:\n\nUse asterisks *, plus +, or minus - for bulleted lists. For example:\n  * Item 1\n  * Item 2\n\nHow to make a good GitHub profile README?\nTo create an impactful GitHub profile README, focus on an engaging presentation of your skills and projects. Begin with a brief introduction, including your name, role, and a touch of personalization to make it relatable.\nNext, showcase your work by organizing sections with project thumbnails, titles, descriptions, and links to your repositories or deployed applications. Consider incorporating GitHub Readme Stats or widgets to display your GitHub activity, lending credibility to your contributions. List your skills and technologies to give viewers insight into your expertise. Highlight significant achievements and contributions, and provide contact information for networking and collaboration opportunities.\nKeep your README updated as you embark on new projects or attain milestones, and encourage engagement from visitors by including a call to action.\n\n\nName Section:\nThis will go best at the top of your profile readme. Paste this code at the top.\n\nMarkdown\n\n\n\n\n\nJohn Doe\n\n\n\n\n# John Doe\n\n\n\nHTML\n\n\n\nJohn Doe\n\n\n\n\n&lt;h1&gt; John Doe &lt;/h1&gt;"
  },
  {
    "objectID": "lessons/unit_01/lesson_03/lesson_03.html#hands-on-practice-activity",
    "href": "lessons/unit_01/lesson_03/lesson_03.html#hands-on-practice-activity",
    "title": "Lesson 03: Writing in Markdown",
    "section": "Hands On Practice Activity",
    "text": "Hands On Practice Activity\nFor this lesson, you will be doing two(2) activities.\n\nYou shall be recreating this documents‚Äì&gt; document The image link for this task can be gotten here: image\n\n\nGitHub Profile Setup:\n\nIf you don‚Äôt have a GitHub account, sign up for one here. Refer to Lesson 1 guide.\nCreate a new repository with the name ‚ÄúMarkdown Practice‚Äù.\nAdd a short description and initialize it with a README.\n\n\n\nMarkdown README:\n\nEdit the README file in your repository using the GitHub online editor.\n\n\nTasks\n\nHeadings\n\n\nCreate a top-level heading with the text ‚ÄúHello World.‚Äù\nAdd a second-level heading with the text ‚ÄúThis is my Markdown Journey.‚Äù\nInclude a third-level heading with the text ‚ÄúHere We Go.‚Äù\n\n\nEmphasize Text\n\n\nWrite your full name in bold letters\nWrite your full name again this time in italics\n\n\nLists\n\n\nCreate an unordered list of your favorite hobbies.(list 3 of them)\nCreate an ordered list of a simple task one can do.\n\nHere is an example\n\nHow to make Peanut Butter and Jam Sandwich\n\nGather ingredients and tools: Bread, Peanut Butter, Jelly or Jam, Butter knife, Plate.\nPrepare the workspace: Lay out a clean surface.\nSpread Peanut Butter on one slice.\nSpread Jelly on the other slice.\nCombine the slices to make a sandwich.\nServe and Enjoy.\n\nDo not use the example task given above find another.\n\nCode Blocks\n\n\nWrite a small Python code snippet inside a code block that prints ‚ÄúMarkdown is fun!‚Äù\n\n\nLinks\n\n\nWrite a small Python code snippet inside a code block that prints ‚ÄúMarkdown is fun!‚Äù\n\n\nAdd an image\n\n\nTwo options: save an image of your choice in the folder that you are currently working on, then add that image on your markdown, another option is to copy an image address of an image on the internet of your choice and add it to your markdown.\n\n\n\n\n\nTips\n\nRefer back to the lesson content for guidance on Markdown syntax. Test your Markdown file by previewing it locally or using online Markdown editors.\nFeel free to explore additional Markdown features not covered in the lesson.\n\nHappy Markdowning! üöÄ"
  },
  {
    "objectID": "lessons/unit_01/lesson_03/lesson_03.html#tips",
    "href": "lessons/unit_01/lesson_03/lesson_03.html#tips",
    "title": "Lesson 03: Writing in Markdown",
    "section": "Tips",
    "text": "Tips\n\nRefer back to the lesson content for guidance on Markdown syntax. Test your Markdown file by previewing it locally or using online Markdown editors.\nFeel free to explore additional Markdown features not covered in the lesson.\n\nHappy Markdowning! üöÄ"
  },
  {

    "objectID": "lessons/unit_02/Lesson_04/quarto_website.html#getting-started-with-building-your-first-website",
    "href": "lessons/unit_02/Lesson_04/quarto_website.html#getting-started-with-building-your-first-website",
    "title": "Lesson 04: Creating Your First Website with Quarto",
    "section": "Getting started with building your first website",
    "text": "Getting started with building your first website\n\nOpen Visual Studio Code (VS Code)\nIn VS Code, execute the Quarto: Create Project command from the command-palette:\n\nThen, select Website Project:\n\nYou‚Äôll be prompted to select a parent directory/folder to create the project within. Then, you‚Äôll be asked to name the directory/folder for your website project. For example, Quarto Project:\n\nThe new website project will be created and opened within VS Code. Click the Render button to preview the website:\n\n\n\nThe quarto.yml file holds metadata such as the title of the document, author information, and other details that help describe and identify the document.\n\n\n\nYAML Navigation\n\n\nIn the above image, the left side contains a YAML file that contains the metadata.\nThe title of the website is called Quarto Website,\nThe navbar is essentially a navigation bar that helps users easily navigate through different sections or pages of the website. Each item in the left navigation specifies a page or a link, and the text attribute defines the text that will be displayed for that link.\nIf we want to add two new pages (blog_post.qmd and contact.qmd) to the main About Me page we first create the qmd files, then add the files in the navbar section in the .yml file.\n\n\n\nAdding Pages"

  },
  {
    "objectID": "lessons/Unit_2/lesson_03.html#for-windows-users",
    "href": "lessons/Unit_2/lesson_03.html#for-windows-users",
    "title": "Lesson 3: Git and How to connect to VScode",
    "section": "1. For Windows Users",
    "text": "1. For Windows Users\nDownload the Git Installer:\n\nVisit the Git website and download the latest version of Git for Windows.\nThe download should automatically start based on your Windows version.\n\nRun the Installer:\nOpen the downloaded file to start the installation. You will be greeted with the Git Setup wizard.\nInstallation Options: Follow the setup instructions. You can leave most options at their default settings. When prompted to choose the default editor, you may select the one you‚Äôre most comfortable with (e.g., VSCode, Notepad++, etc.).\nAdjusting Your PATH Environment: During the installation, you‚Äôll be asked to adjust your PATH environment. Select ‚ÄúUse Git from the Windows Command Prompt‚Äù for ease of use.\nConfiguring the Line Ending Conversions:\nChoose how you want Git to treat line endings in text files. The recommended setting for Windows users is ‚ÄúCheckout Windows-style, commit Unix-style line endings‚Äù.\nCompleting the Installation: Proceed with the installation. Once completed, click ‚ÄòFinish‚Äô.\nVerify Installation:\nOpen Command Prompt and type\n    git --version\nto ensure Git is installed correctly and to see the installed version."
  },
  {
    "objectID": "lessons/Unit_2/lesson_03.html#for-macos-users",
    "href": "lessons/Unit_2/lesson_03.html#for-macos-users",
    "title": "Lesson 3: Git and How to connect to VScode",
    "section": "2. For MacOS Users",
    "text": "2. For MacOS Users\nInstall Git via Homebrew: If you have Homebrew (a package manager for macOS), you can install Git by opening the Terminal and typing\n    brew install git\nInstall Git from the Official Website:\nAlternatively, you can download the macOS Git installer from Git‚Äôs official site. Open the downloaded file and follow the installation instructions.\nVerify Installation: In the Terminal, type\n    git --version\nto check the installation."
  },
  {


    "objectID": "tools/r_installation.html",
    "href": "tools/r_installation.html",
    "title": "R Installation",
    "section": "",
    "text": "What is R?\nR is a programming language developed by Ross Ihaka and Robert Gentleman designed for statistical programming. It is primarily focused on data wrangling and visualization.\nAs the phrase ‚Äúprogramming language‚Äù suggests, R is a language used to instruct a computer to carry out complex commands. Like most any other language you will need to understand its grammar and syntax in order to fluently ‚Äúspeak‚Äù it. The more fluent you become in it, the easier it will be for you to communicate your wants and desires to it.\n\n\nInstalling R\n\nGo to cloud.r-project.org\nClick on the download link for your computer system. For example if you are using a windows computer click ‚ÄúDownload R for Windows‚Äù\nClick on ‚Äúbase‚Äù\nClick on the download version for the current version of R. (At time of writing the button says ‚ÄúDownload R-4.3.1 for Windows‚Äù on a windows computer.) Make sure you know where you save the downloaded file so that you can run the installer.\nNavigate to the downloaded file and run the installer by double clicking. (Usually it is title something like ‚ÄúR-4.3.1-win‚Äù) Follow the steps for the installation wizard. It is highly recommended you just keep the recommended installation settings especially if you haven‚Äôt done this before.\nR should now be properly installed. We‚Äôll show you how to check it properly in the next tutorial ‚ÄúInstalling R Studio‚Äù"

  }
]