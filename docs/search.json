[
  {
    "objectID": "tasks_overview.html",
    "href": "tasks_overview.html",
    "title": "Course Tasks",
    "section": "",
    "text": "Task 1 - Creating Your First Github Repo\nGit is the world’s most popular version control system and Github is the most popular site for hosting code using git in the cloud. As a version control system, Git helps you keep your coding project files organized by keeping a record of when you edited files and tags them with short notes about what changes were made in the last iteration. This is particularly helpful when you are colaborating on a project with other programmers and need to stay tidy while working on the same files.\nGithub is a free web service for storing your version controlled code in the cloud. It allows you to access your code from anywhere and it provides a handy interface for tracking your code’s changes over time. It also happens to have a handy service for hosting static websites for free on their platform.\nIn this task you will create a github account, create a repository, and clone that repository onto your local machine in Rstudio."
  },
  {
    "objectID": "lessons/unit_03/lesson_02/lesson_02.html",
    "href": "lessons/unit_03/lesson_02/lesson_02.html",
    "title": "Hosting Your Website On Github",
    "section": "",
    "text": "By the end of this lesson, students will be able to create a GitHub repository for their website and configure the basic settings for hosting on GitHub Pages"
  },
  {
    "objectID": "lessons/unit_03/lesson_02/lesson_02.html#overview",
    "href": "lessons/unit_03/lesson_02/lesson_02.html#overview",
    "title": "Hosting Your Website On Github",
    "section": "",
    "text": "By the end of this lesson, students will be able to create a GitHub repository for their website and configure the basic settings for hosting on GitHub Pages"
  },
  {
    "objectID": "lessons/unit_03/lesson_02/lesson_02.html#learning-objectives",
    "href": "lessons/unit_03/lesson_02/lesson_02.html#learning-objectives",
    "title": "Hosting Your Website On Github",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nStudents will be able to Create a repository for website and initialize a GitHub Pages branch.\nStudents will be able Upload Your Website Files\nStudents will be able to view website"
  },
  {
    "objectID": "lessons/unit_03/lesson_02/lesson_02.html#links",
    "href": "lessons/unit_03/lesson_02/lesson_02.html#links",
    "title": "Hosting Your Website On Github",
    "section": "links",
    "text": "links\nhttps://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages\nhttps://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site"
  },
  {
    "objectID": "lessons/unit_03/lesson_02/lesson_02.html#lesson",
    "href": "lessons/unit_03/lesson_02/lesson_02.html#lesson",
    "title": "Hosting Your Website On Github",
    "section": "Lesson",
    "text": "Lesson\nHosting on GitHub typically refers to using GitHub Pages, a built-in service provided by GitHub for hosting static websites directly from your GitHub repository. GitHub Pages is a convenient and free way to showcase your projects, portfolio, documentation, or any other static content.\n\nLet begin\n\nLog in to GitHub.\nCreate a Repository: Go to your GitHub profile and click on the “+” sign to create a new repository. Name your repository(choose any preferred name).\nAdd Your Website Files: Upload your website files to the repository by highlighting and dragging and dropping into your repository\n\n\n\n\ncommit changes\nEnable GitHub Pages: In your repository, go to the “Settings” tab. Scroll down to the “GitHub Pages” section and click ‘check out here’\n\n\nUnder “Source,” select the branch you want to use (usually main or master). file should be /docs* Click “Save.”\n\n\n\nclick on the link attached ‘your site is ready to be published’ to veiw your site"
  },
  {
    "objectID": "lessons/unit_03/lesson_02/lesson_02.html#conclusion",
    "href": "lessons/unit_03/lesson_02/lesson_02.html#conclusion",
    "title": "Hosting Your Website On Github",
    "section": "Conclusion",
    "text": "Conclusion\nyou should be able to veiw and share your website with everyone"
  },
  {
    "objectID": "lessons/unit_03/lesson_02/lesson_02.html#faq",
    "href": "lessons/unit_03/lesson_02/lesson_02.html#faq",
    "title": "Hosting Your Website On Github",
    "section": "FAQ",
    "text": "FAQ"
  },
  {
    "objectID": "lessons/unit_02/lesson_03/lesson_03.html",
    "href": "lessons/unit_02/lesson_03/lesson_03.html",
    "title": "Lesson 3: Git and How to connect to VScode",
    "section": "",
    "text": "Understand the concepts of Git and its functionality.\nLearn the benefits of using Git for version control.\nIdentify the basic Git workflows, including cloning, committing, pushing, branching, and merging.\nGain practical knowledge of setting up and using Git within VScode."
  },
  {
    "objectID": "lessons/unit_02/lesson_03/lesson_03.html#for-windows-users",
    "href": "lessons/unit_02/lesson_03/lesson_03.html#for-windows-users",
    "title": "Lesson 3: Git and How to connect to VScode",
    "section": "1. For Windows Users",
    "text": "1. For Windows Users\nDownload the Git Installer:\n\nVisit the Git website and download the latest version of Git for Windows.\nThe download should automatically start based on your Windows version.\n\nRun the Installer:\nOpen the downloaded file to start the installation. You will be greeted with the Git Setup wizard.\nInstallation Options: Follow the setup instructions. You can leave most options at their default settings. When prompted to choose the default editor, you may select the one you’re most comfortable with (e.g., VSCode, Notepad++, etc.).\nAdjusting Your PATH Environment: During the installation, you’ll be asked to adjust your PATH environment. Select “Use Git from the Windows Command Prompt” for ease of use.\nConfiguring the Line Ending Conversions:\nChoose how you want Git to treat line endings in text files. The recommended setting for Windows users is “Checkout Windows-style, commit Unix-style line endings”.\nCompleting the Installation: Proceed with the installation. Once completed, click ‘Finish’.\nVerify Installation:\nOpen Command Prompt and type\n    git --version\nto ensure Git is installed correctly and to see the installed version."
  },
  {
    "objectID": "lessons/unit_02/lesson_03/lesson_03.html#for-macos-users",
    "href": "lessons/unit_02/lesson_03/lesson_03.html#for-macos-users",
    "title": "Lesson 3: Git and How to connect to VScode",
    "section": "2. For MacOS Users",
    "text": "2. For MacOS Users\nInstall Git via Homebrew: If you have Homebrew (a package manager for macOS), you can install Git by opening the Terminal and typing\n    brew install git\nInstall Git from the Official Website:\nAlternatively, you can download the macOS Git installer from Git’s official site. Open the downloaded file and follow the installation instructions.\nVerify Installation: In the Terminal, type\n    git --version\nto check the installation."
  },
  {
    "objectID": "lessons/unit_02/lesson_03/lesson_03.html#for-linux-users",
    "href": "lessons/unit_02/lesson_03/lesson_03.html#for-linux-users",
    "title": "Lesson 3: Git and How to connect to VScode",
    "section": "3. For Linux Users",
    "text": "3. For Linux Users\nInstall Git through Package Manager:\n\nFor Debian/Ubuntu-based distributions, open the Terminal and type\n\n    sudo apt-get install git\n\nFor Fedora, users\n\n    sudo dnf install git\n\nFor other distributions, use the respective package manager and the package named ‘git’.\n\nVerify Installation: Confirm the installation by typing in the terminal.\n    git --version"
  },
  {
    "objectID": "lessons/unit_02/lesson_03/lesson_03.html#local-repository",
    "href": "lessons/unit_02/lesson_03/lesson_03.html#local-repository",
    "title": "Lesson 3: Git and How to connect to VScode",
    "section": "Local Repository",
    "text": "Local Repository\nDefinition: A local repository in Git is a directory on your computer where Git stores all the files and the history of changes made to those files.\nFunction: It allows you to work on your project and make commits, branches, and other Git operations offline.\n\nCreation and Usage:\n\nCommand Line\n\nCreated using git init or git clone commands.\nLocal repositories are where you’ll do most of your work, including editing, staging, and committing changes.\nNote: When you initialize or clone a repository on your local mahcine, you will often see a .Git directory as shown below:\n\n\n\nRemote Repository\nDefinition: A remote repository is a version of your project hosted on the internet or a network.\nPurpose: It facilitates collaboration, allowing multiple people to push to and pull from the same project.\nCommon Platforms: Platforms like GitHub, GitLab, and Bitbucket host remote repositories.\n\n\nInteraction:\n\nYou can push your local changes to a remote repository using\n\n    git push\n\nYou can also fetch and merge changes from a remote repository to your local one using\n\n    git pull\n    git fetch\n    git merge"
  },
  {
    "objectID": "lessons/unit_02/lesson_03/lesson_03.html#source-control",
    "href": "lessons/unit_02/lesson_03/lesson_03.html#source-control",
    "title": "Lesson 3: Git and How to connect to VScode",
    "section": "Source Control",
    "text": "Source Control\n\nClone a Repository\nTo get a repository from GitHub onto your computer, the repository on GitHub needs to be “cloned” on to your computer. Open a new window in VSCode, source control will look like this.\n\nSteps: - open new window for VSCode - copy the github url for the desired repository - click “Clone Repository” and paste in there\n\n\nInitialize a Repository\nTo put an existing project of yours onto GitHub, you’ll need to “initialize a repository”. Open VSCode in that existing project’s folder, source code will look like this.\n\nSteps:\n\nclick “Initialize Repository”"
  },
  {
    "objectID": "lessons/unit_02/lesson_03/lesson_03.html#git-push",
    "href": "lessons/unit_02/lesson_03/lesson_03.html#git-push",
    "title": "Lesson 3: Git and How to connect to VScode",
    "section": "Git Push",
    "text": "Git Push\nPurpose: Git push is used whenever we want to push your current commit from your local repository to the remote repository. What this code does under the hood is to push the current state of our codes to the remote repository.\nSyntax\n    git push [branch-name]\nReplace [branch-name] with the name of the branch in which you wish to push the changes to. By default, origin is the name git gives to the remote repository once initialized or cloned. And the default branch name in origin is main\n    git push -u origin main"
  },
  {
    "objectID": "lessons/unit_02/lesson_03/lesson_03.html#source-control-1",
    "href": "lessons/unit_02/lesson_03/lesson_03.html#source-control-1",
    "title": "Lesson 3: Git and How to connect to VScode",
    "section": "Source Control",
    "text": "Source Control\nTo get your changes from your computer to GitHub, you’ll need to commit and push your changes.\n\nTo commit and push your most recent changes to your files:\n\nsave your file\ntype out a message that reflects your how this version of your code is different from the previous version\nclick “Commit”\nclick “Sync Changes”"
  },
  {
    "objectID": "lessons/unit_02/lesson_01/lesson_01.html",
    "href": "lessons/unit_02/lesson_01/lesson_01.html",
    "title": "Lesson 01 : Introduction to Visual Studio Code",
    "section": "",
    "text": "In this lesson, we’ll go over an Integrated Development Enviroment (IDE) known as Visual Studio Code, also commonly referred to as VS Code. We’ll explore what an IDE - such as Visual Studio Code - is, benefits of using it, and in and out’s of using Visual Studio Code."
  },
  {
    "objectID": "lessons/unit_02/lesson_01/lesson_01.html#overview",
    "href": "lessons/unit_02/lesson_01/lesson_01.html#overview",
    "title": "Lesson 01 : Introduction to Visual Studio Code",
    "section": "",
    "text": "In this lesson, we’ll go over an Integrated Development Enviroment (IDE) known as Visual Studio Code, also commonly referred to as VS Code. We’ll explore what an IDE - such as Visual Studio Code - is, benefits of using it, and in and out’s of using Visual Studio Code."
  },
  {
    "objectID": "lessons/unit_02/lesson_01/lesson_01.html#learning-objectives",
    "href": "lessons/unit_02/lesson_01/lesson_01.html#learning-objectives",
    "title": "Lesson 01 : Introduction to Visual Studio Code",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nStudents will understand what VS Code is and why they should use it.\nStudents will know how to download extensions and use VS Code to write source code."
  },
  {
    "objectID": "lessons/unit_02/lesson_01/lesson_01.html#lesson",
    "href": "lessons/unit_02/lesson_01/lesson_01.html#lesson",
    "title": "Lesson 01 : Introduction to Visual Studio Code",
    "section": "Lesson",
    "text": "Lesson\n\nWhat is Visual Studio Code ?\n\nVisual Studio Code is a Integrated Development Enviroment (IDE) developed by Microsoft for Windows, Linux and macOS. An integrated development environment or IDE is a software for building applications. An IDE is just like a text editor except instead of writing documents you’re writing source-code. Visual Studio Code includes features such as syntax highlighting, error highlighting, intelligent code completion, snippets, code refactoring, and embedded Git. Users can change the theme, keyboard shortcuts, preferences, install extensions that add functionality, and has support for different programming languages.\n\nSyntax Highlighting\nTo improve readability for developers, VS Code has syntax highlighting. What this means, is that special keywords of the programming language are highlighted in different colors so that the developer can quickly differentiate these keywords from other texts. For example, if you’re writing Python code without syntax highlighting, it could be harder to identify keywords from other texts. With syntax highlighting, that gets much easier because the Python keywords and variables are colored differently.\n\n\n\nError Highlighting\nJust like checking spelling in a text document, IDEs can highlight mistakes you make in your programming code. For example, if I delete the equal symbol where it’s needed, my IDE will highlight the error.\n\n\nIntelligent Code Completion\nWhen you’re typing a message on your phone, it suggests words as you type. Visual Studio Code’s code completion is a similar feature. Since programming languages have special keywords, it can offer suggestions to autocomplete words as you start typing them. Together with IntelliSense, this makes the IDE smart and even able to understand your code. They can detect variables and functions and offer them as suggestions during autocomplete. For example, if I have a Python function named myFunction defined at the top of the Python file, then as soon as I start typing the letter m my IDE suggest this function as an autocompletion. This speeds up the process of coding applications by reducing typos and other common mistakes.\n\n\n\nCode Refactoring\nSince IDEs understand your code, they can help you if you need to change it. To demonstrate how refactoring works, let’s continue with the myFunction function that I defined a moment ago. In the code, the function is then called multiple times. It can also be called in the code of other files too. But what if you need to rename this function? You would need to rename it in every file that uses the function ensuring that you update those files to use the new name. This process is known as refactoring, changing the structure of the code without changing the functionality. Doing this manually is very time consuming and prone to error. If you mistyped the new function name in one place, the application will break. Since the IDE understand your code, it can assist with refactoring and automatically update the function name across all files.\n\n\nSnippets\nCode snippets are small blocks of reusable code that you can add to a code file by using the right-click context menu command or a combination of hotkeys. This saves time and ensures consistency on routine operations. Snippets make it easier to remember specific formatting for functions and can be shared amomg a team to ensure no one is doubling down on the same work.\n\n\n\nGit\nGit is a version control system that tracks changes in any set of computer files, usually used for coordinating work among developers who are collaboratively developing source code during software development. You’ll learn more on Git in Lesson 3. For now, it’s good to know that Visual Studio code has built-in support for Git through Source Control and the terminal.\n\nVS Code has a host of extensions and plugins that add various functionality to aid rapid software development."
  },
  {
    "objectID": "lessons/unit_02/lesson_01/lesson_01.html#practice-activity",
    "href": "lessons/unit_02/lesson_01/lesson_01.html#practice-activity",
    "title": "Lesson 01 : Introduction to Visual Studio Code",
    "section": "Practice Activity",
    "text": "Practice Activity\n\nDownload and Install Visual Studio Code\n\nPrerequisites\n\nVS Code is lightweight and should run on most available hardware and platform versions. You can review the System Requirements to check if your computer configuration is supported.\n\n\n\nFor Windows PC\n\nVisit the official website of Visual Studio Code using any web browser like Google Chrome, Microsoft Edge, etc.\nClick the “Windows” button under the Windows logo on the website to start the download of the Visual Studio Code Application.\n\n\n\nWhen the download finishes, click on the installer icon in the downloads folder to start the installation process of the Visual Studio Code.\n\n\n\nAfter the Installer opens, it will ask you for accepting the terms and conditions of the Visual Studio Code. Click on I accept the agreement and then click the Next&gt; button.\n\n\n\nProceed through the installation process by clicking on the “next” button at each prompt.\nAt this prompt, optionally check the boxes for “Creating a desktop icon”, and adding VS Code to the Right-Click menu functionality of Windows File Explorer, then click Next &gt;.\n\n\n\nConfirm the installation options, then click Install. The installation will proceed.\n\n\n\nClick Finish to exit the installation and (by default) launch Visual Studio Code.\n\n\nYour VS Code is installed on your PC and ready for you to start coding away with it.\n\nYou can always launch it by clicking on the Desktop Icon (if you selected that option during the installation process) or by searching it in the ⊞ Start Menu.\n\n\n\nFor Mac OS\n\nNavigate to the official website of Visual Studio Code using any web browser like Safari, Google Chrome etc.\nClick the “Mac” button under the Apple logo on the website to start the download of the Visual Studio Code Application\n\n\n\nDepending on the browser used and security settings within, there may be prompts to allow access to the Download folder or similar. Allow any prompts that are generated.\n\n\n\nHold down the Command ⌘ key on your keyboard and press the Space Bar and type ‘Downloads’ in the search field, click on the Downloads Finder icon.\n\n\n\nClick on “Downloads” on the left side of the Finder window then locate the Visual Studio Code application file. You can click on the Date Added column to sort by newest to help you find the VS Code file.\nClick and drag the Visual Studio Code application to the Applications folder on the left.\n\n\nYour VS Code is installed on your Mac and ready for you to start coding away with it.\n\nYou can launch it by clicking on the Launchpad Icon in the Mac OS dock and then either look for the Visual Studio Code icon, or use the Search bar at the top of the Launchpad.\n\nClick on the Visual Studio Code icon once it has been located.\n\nMac OS will prompt to confirm that opening a program downloaded from the internet was an intended action. Click Open\n\n\n\n\nInstall VS Code’s Python Extension\nThis is an extension with rich support for the Python programming language, including features such as IntelliSense (Pylance), linting, debugging, code navigation, code formatting, refactoring, and more!\n\nOpen VS Code and navigate to the extention icon on the left pane.\n\n\n\nSearch “Python” in the search box and select the first item that says “Python” in the search result and click on install.\n\n\n\nOnce it’s done installing, your python extension should be good to go."
  },
  {
    "objectID": "lessons/unit_02/lesson_01/lesson_01.html#conclusion",
    "href": "lessons/unit_02/lesson_01/lesson_01.html#conclusion",
    "title": "Lesson 01 : Introduction to Visual Studio Code",
    "section": "Conclusion",
    "text": "Conclusion\nNice work completing this lesson! By now you should:\n\nKnow what Visual Studio Code is, and IDE’s in general.\nKnow how to and have VS Code installed on your computer.\nKnow how to install and have an extension installed in VS Code.\n\nIn the next lesson, you will learn how to use Quarto - an open-source publishing system, and have the extension installed in VS Code."
  },
  {
    "objectID": "lessons/unit_02/lesson_01/lesson_01.html#faq",
    "href": "lessons/unit_02/lesson_01/lesson_01.html#faq",
    "title": "Lesson 01 : Introduction to Visual Studio Code",
    "section": "FAQ",
    "text": "FAQ"
  },
  {
    "objectID": "lessons/unit_01/lesson_04/lesson_04.html",
    "href": "lessons/unit_01/lesson_04/lesson_04.html",
    "title": "Lesson 4: Additional Profile README Features",
    "section": "",
    "text": "This page will help you know what to include on your github profile readme. All these are ideas. Use this code as needed in your profile. On the left is what the section will look like. On the right is the code used to make the section on the right. Copy the code and put it into your profile, editing it as needed to fit you.\n\n\nGenerally, A GitHub README is a document that typically accompanies a GitHub repository, providing essential information about the repository and its contents. It’s named “README” because it’s often the first thing a visitor should read to understand what the project is about. The importance of a GitHub README cannot be overstated, as it serves several critical functions, but we will only talk about 3 in this lesson.\nKey Features and Importance of a GitHub README:\n\nProject Introduction: It introduces the project to users, developers, or potential contributors. This is where you provide an overview of what the project does and its purpose.\nDocumentation: The README often contains documentation on how to install, configure, and use the project. This can include code examples, configuration settings, and command-line instructions.\nTechnical Details: It may provide technical details such as the technology stack, dependencies, and system requirements.\n\n\n\n\nIn the context of creating a GitHub profile, a GitHub README serves as a personalized introduction and overview of a user’s GitHub presence. Unlike a repository-specific README that focuses on a particular project, a GitHub profile README provides a broader view of the user, their interests, skills, and contributions.\nKey Features and Importance of a Github Profile README:\n\nPersonal Introduction: A brief section about who you are, what you do, and your interests. This can include your professional role, educational background, or areas of expertise.\nSkills and Technologies: Highlight the programming languages, tools, and technologies you are proficient in. This can be done through text, badges, or icons.\nProjects and Work: Showcase your significant or favorite projects. You can include links to repositories, descriptions of what each project entails, and any notable achievements.\nGitHub Statistics: Some users include dynamic GitHub stats like their number of contributions, most used languages, or streaks. This can be done using GitHub widgets and badges."
  },
  {
    "objectID": "lessons/unit_01/lesson_04/lesson_04.html#hard-skills-section",
    "href": "lessons/unit_01/lesson_04/lesson_04.html#hard-skills-section",
    "title": "Lesson 4: Additional Profile README Features",
    "section": "Hard Skills Section",
    "text": "Hard Skills Section\nThis section is where you can show what you are comfortable using. As a beginner, this section can be empty. For more experienced students, it’s a good idea to include the technology you are familiar with. Areas to include are:\n\nprogramming languages: (python, JavaScript, C++…)\nhosting services: (Heroku, GitHub Pages, AWS…)\nframeworks/libraries: (pandas, tensorflow, ggplot2, ReactJS…)\ndatabases: (MSSQL, Postgres…)\n\nor anything else that would help what technology you are comfotable using like Git/GitHub, Quarto which we will be learning later in this course.\nThe example below is table showing technology a Data Science student might be familiar with.\n\n\n\nFavorite Technology\n\n\n\n\nPython\nR\n\n\n\n\nReading\nPandas\nReadr\n\n\nWrangling\nPandas\nTidyr & Dplyr\n\n\nVisualization\nMatplotlib\nggplot2\n\n\nModel\nScitkit-Learn\nTidyModels\n\n\n\n\n\n\n\n\n## Favorite Technology\n\n|               | Python        | R             |\n| ---           | :---:         | :---:         |\n| Reading       | Pandas        | Readr         |\n| Wrangling     | Pandas        | Tidyr & Dplyr |\n| Visualization | Matplotlib    | ggplot2       |\n| Model         | Scitkit-Learn | TidyModels    |"
  },
  {
    "objectID": "lessons/unit_01/lesson_04/lesson_04.html#notes",
    "href": "lessons/unit_01/lesson_04/lesson_04.html#notes",
    "title": "Lesson 4: Additional Profile README Features",
    "section": "Notes",
    "text": "Notes\nRemember to keep your github profile readme up to date. Treat this page like a resume and portal to your portfolio for employers to find. This is a tool for finding work. Think to yourself, “If I were an employer, what would I need in an employee?”. Whatever the answer to that is, convey it in your README."
  },
  {
    "objectID": "lessons/unit_01/lesson_02/lesson_02.html",
    "href": "lessons/unit_01/lesson_02/lesson_02.html",
    "title": "Lesson 2: Creating your GitHub Profile README",
    "section": "",
    "text": "The GitHub profile README serves as a distinctive profile page showcasing who you are and what you do. Functioning as a customizable “about me” section, it provides an avenue for individuals to introduce themselves, exhibit their projects, and communicate details about their interests and achievements. Essentially, the content of this README defines one’s GitHub profile, making it a pivotal element for creating a compelling first impression, particularly for employers seeking insights into an individual’s skills and interests upon visiting their GitHub profile. By the end of this lesson, you will have crafted your own GitHub profile readme using markdown.\nMarkdown is a lightweight and easy-to-use syntax for styling all forms of writing on the web. Markdown is widely used because it allows you to maintain the readability of plain text while offering the styling capabilities of HTML. Our goal is to familiarize you with the foundational elements of Markdown to transform plain text into a rich, well-formatted document.\nThis lesson will be but a brief introduction of markdown. In the next two lessons, you’ll learn how to use Markdown to enhance the visual appeal and structure of your profile, making it easier for others to read and understand the information you share."
  },
  {
    "objectID": "lessons/unit_01/lesson_02/lesson_02.html#overview",
    "href": "lessons/unit_01/lesson_02/lesson_02.html#overview",
    "title": "Lesson 2: Creating your GitHub Profile README",
    "section": "",
    "text": "The GitHub profile README serves as a distinctive profile page showcasing who you are and what you do. Functioning as a customizable “about me” section, it provides an avenue for individuals to introduce themselves, exhibit their projects, and communicate details about their interests and achievements. Essentially, the content of this README defines one’s GitHub profile, making it a pivotal element for creating a compelling first impression, particularly for employers seeking insights into an individual’s skills and interests upon visiting their GitHub profile. By the end of this lesson, you will have crafted your own GitHub profile readme using markdown.\nMarkdown is a lightweight and easy-to-use syntax for styling all forms of writing on the web. Markdown is widely used because it allows you to maintain the readability of plain text while offering the styling capabilities of HTML. Our goal is to familiarize you with the foundational elements of Markdown to transform plain text into a rich, well-formatted document.\nThis lesson will be but a brief introduction of markdown. In the next two lessons, you’ll learn how to use Markdown to enhance the visual appeal and structure of your profile, making it easier for others to read and understand the information you share."
  },
  {
    "objectID": "lessons/unit_01/lesson_02/lesson_02.html#learning-objectives",
    "href": "lessons/unit_01/lesson_02/lesson_02.html#learning-objectives",
    "title": "Lesson 2: Creating your GitHub Profile README",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nStudents will be able to create their own GitHUb profile README\nStudents will be able to recognize and apply markdown syntax to create structured and styled text documents"
  },
  {
    "objectID": "lessons/unit_01/lesson_02/lesson_02.html#lesson",
    "href": "lessons/unit_01/lesson_02/lesson_02.html#lesson",
    "title": "Lesson 2: Creating your GitHub Profile README",
    "section": "Lesson",
    "text": "Lesson\n\nLet’s Begin Creating a GitHub Profile README\n\nLog in to GitHub.\nClick on + icon at top right of the page and select New Repository.\n\n\n\nA Create a new repository page opens. In the Repository name field, enter your GitHub username. After entering your username, GitHub displays a message describing that you’re about to create a GitHub special repository.\n\nFor example, if your username is octocat, you would create a repository named octocat.\n\n\nCheck the public checkbox under repository type to make the Github profile README visible to everyone who visits the Github profile page. If you don’t want users to see your Github profile README while it’s still in development, you can choose Private. Once done with editing the README, you can go to the repo settings to change it’s visibilty to Public.\nCheck the Add a README file checkbox. This will add a README.md file where we’ll add the profile contents. The field values should look similar to the image below.\n\n\n\nClick on the Create repository button. A special repository is created successfully. Go to the repository you just created by clicking your profile picture, then “Your repositories”, and then the repository named after your GitHub profile. You’ll see a README.md file added to the repository.\n\n\nIn the next few sections, we’ll add contents to our README.md file. We’ll use Github’s file editor to write and preview the changes. There are other text editor which you can use as well such as Vs Code Editor, Sublime Text, Atom etc. But for this lesson, we shall be making use of Github file editor.\nOpen the README.md file and click on the Edit this file icon (a pencil icon) on the top right of the repo page. As highlighted in the image below:\n\n\n\n\nProfile README Template\nCopy and paste this into your GitHub profile readme. Fill out the areas to make it relate to you.\n# &lt;Your Name Here&gt;\n\nHello, GitHub! 👋\n\nI'm &lt;Your Name Here&gt;, a student interested in &lt;Your Profession/Interests such as: computer science, data science, web develpoment, machine learning, data engineering, statistics, software development...&gt;. Welcome to my GitHub profile!\n\n## About Me\n\n- 🌱 I'm currently learning &lt;Your Current Learning Focus&gt;\n- 💬 Ask me about &lt;Anything You're Enthusiastic About&gt;\n\n## Technologies and Tools\n\n- 💻 Proficient in: &lt;List of Programming Languages or Technologies&gt;\n- 🚀 Skills: &lt;Any Other Skills or Tools You Want to Highlight&gt;\n\n## Let's Connect!\n\n- Here is my [LinkedIn](Your LinkedIn Profile Link) profile\n- Here is my [Twitter](Your Twitter Profile Link) profile\n\nFeel free to explore my repositories and don't hesitate to reach out. Happy coding! 🚀\n\nIf your name is Chidi Anagonye, a web developer from Senegal, this is what yours would look like:\n\n\nChidi Anagonye\n\nHello, GitHub! 👋\nI’m Chidi Anagonye, a student interested in web develpoment. Welcome to my GitHub profile!\n\nAbout Me\n\n\n🌱 I’m currently learning the ins and outs of front-end web development, focusing on HTML, CSS, and JavaScript.\n👯 I’m eager to to learn new technologies and apply them in web projects!\n💬 Ask me about my journey into coding, the latest web technologies, or anything tech-related that you find exciting.\n\n\nTechnologies and Tools\n\n\n💻 Proficient in: HTML, CSS, JavaScript\n🚀 Skills: Responsive Web Design & Basic Command Line\n\n\nLet’s Connect!\n\n\nHere is my LinkedIn profile\nHere is my Twitter profile\n\nFeel free to reach out to me. Happy coding! 🚀\n\nRemember that your GitHub profile is visible to the public, so make sure your customization represents you and your work effectively. This customization not only adds a personal touch to your GitHub presence but also serves as a valuable portfolio for potential collaborators and employers."
  },
  {
    "objectID": "lessons/unit_01/lesson_02/lesson_02.html#conclusion",
    "href": "lessons/unit_01/lesson_02/lesson_02.html#conclusion",
    "title": "Lesson 2: Creating your GitHub Profile README",
    "section": "Conclusion",
    "text": "Conclusion\nYou should now have a basic profile README that employers and collaborators can find to network with you. In the next lessons you’ll learn how to write your own documents from scratch in markdown and how to further improve your profile page."
  },
  {
    "objectID": "lessons/lesson_template.html",
    "href": "lessons/lesson_template.html",
    "title": "Lesson",
    "section": "",
    "text": "[Replace this text with a paragraph explaining what will be learned in this lesson]"
  },
  {
    "objectID": "lessons/lesson_template.html#overview",
    "href": "lessons/lesson_template.html#overview",
    "title": "Lesson",
    "section": "",
    "text": "[Replace this text with a paragraph explaining what will be learned in this lesson]"
  },
  {
    "objectID": "lessons/lesson_template.html#learning-objectives",
    "href": "lessons/lesson_template.html#learning-objectives",
    "title": "Lesson",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n[write a single bullet point for each thing that a learner will be able to do by the end of the lesson. Traditionally these are written with the sentence starter “Students will be able to…”]\n\nStudents will be able to [set up a github profile]\nStudents will be able to [create new github repos]"
  },
  {
    "objectID": "lessons/lesson_template.html#lesson",
    "href": "lessons/lesson_template.html#lesson",
    "title": "Lesson",
    "section": "Lesson",
    "text": "Lesson\n[Replace this text with the content of the actual lesson]"
  },
  {
    "objectID": "lessons/lesson_template.html#practice-activity",
    "href": "lessons/lesson_template.html#practice-activity",
    "title": "Lesson",
    "section": "Practice Activity",
    "text": "Practice Activity\n[This is where we assign students a task to practice what they have learned. This should largely correlate with the Lesson Objectives from up above.]"
  },
  {
    "objectID": "lessons/lesson_template.html#conclusion",
    "href": "lessons/lesson_template.html#conclusion",
    "title": "Lesson",
    "section": "Conclusion",
    "text": "Conclusion\n[Wrap-up by restating what should have been learned in this lesson. Then tease other lessons.\nexample: You should now have your own github profile and should be equipped to help others make one as well. In the next lesson you will learn how to add a profile page to your profile that shows others what make you unique and what particular skills you have.]"
  },
  {
    "objectID": "lessons/lesson_template.html#faq",
    "href": "lessons/lesson_template.html#faq",
    "title": "Lesson",
    "section": "FAQ",
    "text": "FAQ\n[This is where we will post common questions students have while doing a lesson along with answers to those questions. This list will likely grow as more students take the course and we learn what they struggle with]\n\nWhat is two-factor authentication?\nTwo-factor authentication is when you use an additional tool to sign into your account such as a text message or an authenticator app. Two factor authentication helps provide an extra layer of security when signing in to keep your data safe. The first factor is almost always your password. The second factor is usually something that a hacker is unlikely to have access to like an authenticator app on your cell-phone."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "Introduction\nWelcome to GitHub Pages Training, a course designed to take you from complete beginner to a website creating machine! In this course we will walk through the basics of using Github, R, and Quarto for website development. If you don’t know what any of those are, that is OK. We’ll teach you! Just know this, we will collectively use those tools to develop free websites. Along the way you will pick up the fundamental data science skills used by professionals every day.\n\n\nRequired Experience\nThis course assumes that you have no technical experience with website creation, programming, or using GitHub. It does however assume that you have a basic understanding of how to navigate a computer and its file management system.\nYou will be well served by knowing how to find answers to your questions through a search engine like Google. Many say that the best programmers are really just the best googlers.\nSome excellent websites where people post questions and answers to common programming questions are Stack Overflow and GitHub.\n\n\nRequired Materials\nYou will need access to the following materials to complete this course:\n\nA computer with at least 8GB of RAM\nA stable internet connection\nA discord account with access to our discord server\n\n\n\nCourse Structure\nThis course is designed to allow you to complete learning assignments on your own but with some healthy support from our data science team. We will meet for whole team check-ins once a week virtually through zoom. Additionally, we will have a discord server where you can post questions, pictures of your class projects, and assist other learners in our community.\nYou are expected to interact on that discord server over the duration of the course both for your benefit and the benefit of your peers. It’s also a great place to meet like-minded individuals and grow your network!\nYou will be assigned a data science mentor who can help you with your assignments. Discord will be your primary tool for interacting.\n\n\nCourse Outcomes\n\nWhat you will know by the end\nBy the end of this course you should know how to build a basic, static website using R and hosted for free on Github. You will know how to customize your website and how to add cool things like embedded pictures and videos, interactive charts, and direct links to social platforms like facebook and twitter.\n\nYou will know how to use Github for version control of future coding projects.\nYou will know how to use the R programming language to generate plots and manage data from a variety of sources.\nYou will know how to use Quarto to publish professional reports including websites.\n\n\n\nWhat you will not know by the end\nWhile we hope you feel you can create a custom website from scratch by the end of this course, there will still be some things you won’t be able to do by the end.\n\nYou won’t be able to create a dynamic website. A dynamic website is where the contents of the site react differently to each individual user on the site. (Like facebook, google, or youtube)\nYou won’t known the ins and outs of data science skills like data wrangling or machine learning. (These are saved for future courses)\n\n\n\n\nConclusion\nWe truly hope you enjoy this course and that it serves you on your data science journey. This course is designed to teach you the basic skills you will need to succeed as a data scientist. We do this through a lens of learning how to create websites but with the primary intent of giving you transferable skills to succeed in the world of data science."
  },
  {
    "objectID": "lessons/unit_01/lesson_01/lesson_01.html",
    "href": "lessons/unit_01/lesson_01/lesson_01.html",
    "title": "Lesson 01: Creating a Github Account",
    "section": "",
    "text": "This lesson will go over the steps necessary to create a GitHub account. GitHub is a site that will host repositories fo code for free. It’s an industry standard tool used by most programmers. In this course it has the added benefit of being the place where we will host the websites we create.\nIn future lessons you will even make a profile page where employers can find you and see what you are working on."
  },
  {
    "objectID": "lessons/unit_01/lesson_01/lesson_01.html#overview",
    "href": "lessons/unit_01/lesson_01/lesson_01.html#overview",
    "title": "Lesson 01: Creating a Github Account",
    "section": "",
    "text": "This lesson will go over the steps necessary to create a GitHub account. GitHub is a site that will host repositories fo code for free. It’s an industry standard tool used by most programmers. In this course it has the added benefit of being the place where we will host the websites we create.\nIn future lessons you will even make a profile page where employers can find you and see what you are working on."
  },
  {
    "objectID": "lessons/unit_01/lesson_01/lesson_01.html#learning-objectives",
    "href": "lessons/unit_01/lesson_01/lesson_01.html#learning-objectives",
    "title": "Lesson 01: Creating a Github Account",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nStudents will be able to set up a github profile"
  },
  {
    "objectID": "lessons/unit_01/lesson_01/lesson_01.html#lesson",
    "href": "lessons/unit_01/lesson_01/lesson_01.html#lesson",
    "title": "Lesson 01: Creating a Github Account",
    "section": "Lesson",
    "text": "Lesson\n\nStep 01: Find Github\n\nNavigate to Github.com.\nClick on the right side of the pink arrow to enter your email address.\n\n\n\n\nGithub Homepage.\n\n\n\n\nStep 02: Enter Email address, Password, and Username\n\nEnter a valid email address that you have immediate access to. Double check to make sure the email address is valid and that you have access to it.\nIf the continue button turns green, tap it.\nA new section will appear prompting you to input a password. Make sure to follow the password guidelines that will appear at the bottom of the password input area.\nAgain, click on the green continue button.\nA new section will appear prompting you to input a username. Follow the username guidelines that will appear at the bottom of the username input area.\nWhile you do not have to use your real name, please bear in mind that any username you enter is immutable, you WILL NOT HAVE THE OPTION to change it later. A good Github username is one that is easily searchable. This means it will not include long, random string of characters, it will not include overly long or complex numbers, and ideally it is easy to spell when the name is heard phonetically. The username you choose will be searchable and viewable by the public, so make sure it is a name you would like to be associated with your professional brand, now and in the future.\nClick on the green continue button.\nA prompt will appear asking if you want to receive annoucements via email. If you are okay with receiving product email and announcements from Github, enter the letter y, if not, enter the letter n in the input area provided.\nClick on the green continue button.\n\n\n\n\nResults of Step 02.\n\n\n\n\nStep 03: Verifying your account\n\nA new section will drop down asking you to verify your account. Click on the word Verify. It should turn green when you hover over it.\n\n\n\nThe verification challenge would be a picture of a pointing hand on the left, and a picture of an animal on the right. The challenge is to use the ⬅ and ➡ buttons which are below the picture of an animal to position the animal to face in the direction the hand is pointing.\n\n\n\nYou may have one or two of a similar challenge.\n\n\n\nWhen you are done with the challenge a check mark ✅ will appear.\nNow click on the green create account button that will be at the bottom of the screen.\n\n\n\nA code will be sent to the email address you entered previously.\nOpen you email account and refresh your inbox. You should see a message from Github.\nIf after a while, you still do not see an email from Github, go back to the webpage and tap the link below the Enter code section. The link will be named Resend the code. This will prompt Github to send a new message to your email.\nWhen you receive the email, open it and take note of the numbers there.\nReturn to the Github webpage and input the numbers into the boxes provided.\n\n\n\nIf you have entered the numbers correctly, a new webpage will appear.\n\n\n\nStep 04: Final Setup\n\nYou will be asked two questions\n\nHow many team members will be working with you?\n\nFor this question choose the option 2-5.\n\nAre you a student or teacher?\n\nFor this question choose the option student if you are a student. Choose N/A if you are neither a student nor a teacher.\n\n\n\n\n\nA new webpage will appear asking you some questions. Just click the continue button found at the bottom of the page. \nYou will see a new webpage with two sections, one labelled Free and the other Get Student Benefits.\n\n\n\nFor now, go to the bottom of the page and click Continue for free, even if you are a student. You can get student benefits later.\n\n\n\nWoohoo!! Your Github dashboard should now be open.\n\n\n\n\nStep 05: Edit Profile Picture\nYour profile picture is one of the first things visitors to your Github account will see. Make sure your picture is clean, clear, and professional. However, you do not have to dress in formal attire.\nTo edit your profile picture, do the following while in your github dashboard: - Click on the round picture frame on the top right-hand corner. A panel will open with your username at the top.\n\n\nClick on Your Profile. You will be directed to a new webpage with a bigger picture frame on the left.\n\n\n\nClick on the picture frame. Again you will be taken to yet another webpage but with the picture frame on the right side of the screen. Notice that the picture frame has an edit button on the bottom left.\n\n\n\nClick on the edit buttom. It will reveal an upload button. Click on that and it will bring up a dialog box where you can upload a profile picture that meets the criteria discussed at the beginning of Step 05.\n\n\nCongratulations 🎉😎, You have successfully created a GitHub Account and uploaded an appropriate Profile picture!"
  },
  {
    "objectID": "lessons/unit_01/lesson_01/lesson_01.html#practice-activity",
    "href": "lessons/unit_01/lesson_01/lesson_01.html#practice-activity",
    "title": "Lesson 01: Creating a Github Account",
    "section": "Practice Activity",
    "text": "Practice Activity\n\nCreate a Github account.\nWhen your dashboard opens, take a screen shot of it.\nUpload an appropriate profile picture.\nTake a screenshot of your profile page, showing your profile picture.\nPost both screenshots in your group so your classmates and mentors can see."
  },
  {
    "objectID": "lessons/unit_01/lesson_01/lesson_01.html#video-walkthrough",
    "href": "lessons/unit_01/lesson_01/lesson_01.html#video-walkthrough",
    "title": "Lesson 01: Creating a Github Account",
    "section": "Video Walkthrough",
    "text": "Video Walkthrough"
  },
  {
    "objectID": "lessons/unit_01/lesson_01/lesson_01.html#conclusion",
    "href": "lessons/unit_01/lesson_01/lesson_01.html#conclusion",
    "title": "Lesson 01: Creating a Github Account",
    "section": "Conclusion",
    "text": "Conclusion\nYou should now have your own Github account/profile and should be equipped to help others make one as well. In the next lesson you will learn how to add a profile page to your profile that shows others what make you unique and what particular skills you have."
  },
  {
    "objectID": "lessons/unit_01/lesson_01/lesson_01.html#faq",
    "href": "lessons/unit_01/lesson_01/lesson_01.html#faq",
    "title": "Lesson 01: Creating a Github Account",
    "section": "FAQ",
    "text": "FAQ\n\nWhat is two-factor authentication?\nTwo-factor authentication is when you use an additional tool to sign into your account such as a text message or an authentication app. Two factor authentication helps provide an extra layer of security when signing in to keep your data safe. The first factor is almost always your password. The second factor is usually something that a hacker is unlikely to have access to like an authentication app on your cell-phone.\n\n\nWhat if I fail the picture challenge?\nDon’t stress. Refresh the webpage and try again.\nUnless you are a robot. Then do stress…"
  },
  {
    "objectID": "lessons/unit_01/lesson_03/lesson_03.html",
    "href": "lessons/unit_01/lesson_03/lesson_03.html",
    "title": "Lesson 03: Writing in Markdown",
    "section": "",
    "text": "You will learn the basics of Markdown, a lightweight markup language that is widely used for formatting plain text. Markdown is commonly used for writing content on platforms like GitHub, where it is essential for creating README files, documentation, and more."
  },
  {
    "objectID": "lessons/unit_01/lesson_03/lesson_03.html#overview",
    "href": "lessons/unit_01/lesson_03/lesson_03.html#overview",
    "title": "Lesson 03: Writing in Markdown",
    "section": "",
    "text": "You will learn the basics of Markdown, a lightweight markup language that is widely used for formatting plain text. Markdown is commonly used for writing content on platforms like GitHub, where it is essential for creating README files, documentation, and more."
  },
  {
    "objectID": "lessons/unit_01/lesson_03/lesson_03.html#learning-objectives",
    "href": "lessons/unit_01/lesson_03/lesson_03.html#learning-objectives",
    "title": "Lesson 03: Writing in Markdown",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nStudents will be able to format plain text using Markdown syntax.\nStudents will be able to write README files using Markdown in GitHub repositories."
  },
  {
    "objectID": "lessons/unit_01/lesson_03/lesson_03.html#lesson",
    "href": "lessons/unit_01/lesson_03/lesson_03.html#lesson",
    "title": "Lesson 03: Writing in Markdown",
    "section": "Lesson",
    "text": "Lesson\n\nWhy Markdown Matters ?\nMarkdown is an incredibly important yet incredibly basic formatting language. Here are a few of the reasons why it matters:\n\nMarkdown can be used for basically everything. It’s used to create websites, documents, notes, presentations and technical documentation.\nMarkdown is as beginner-friendly as it’s powerful, portable and platform independent. It can be created on any device running any operating system, using virtually any application.\nMarkdown is everywhere. It’s supported on GitHub, and lots of desktop and web-based applications.\nMarkdown is future proof. Even if the application you’re using stops working at some point in the future, you’ll still be able to read your Markdown-formatted text using a text editing application. This is an important consideration when it comes to milestone documents that need to be preserved indefinitely.\n\nIn short, Markdown is a handy, versatile text-formatting tool that you can use to create websites and other text-based documents, which you’ll be using throughout your computer science journey. Knowing how to use it will prove essential as you kickstart your journey.\n\n\nEmphasizing text in Markdown\n\nIn Markdown, the use of asterisks (*) or underscores (_) allows you to emphasize text by making it either italic or bold.\nTo make text italic, wrap it with a single asterisk or underscore on both sides: *italic* or _italic_.\nFor bold text, wrap it with double asterisks or underscores: **bold** or __bold__.\n\n\n\nHeadings in Markdown\n\nHeadings are created using hash (#) symbols. The number of hash symbols determines the level of the heading, with more hash symbols indicating a lower-level heading.\n# Heading 1: This is a top-level heading. It will be rendered as a large, bold heading.\n## Heading 2: This is a second-level heading. It is slightly smaller and less prominent than Heading 1.\n### Heading 3: This is a third-level heading. It is smaller than Heading 2 and is typically used for subsections or less important headings.\n\n\n\nLists in Markdown\n\nYou can create both unordered lists (bullet points) and ordered lists (numbered items)\n\n\nUnordered list\n- Item 1\n- Item 2\n\n\nOrdered list\n1. Ordered Item 1\n2. Ordered Item 2\n\n\n\nCode blocks in Markdown\n\nTo indicate code blocks, use three backticks before and after the block of code. As such:\n\n``` python \n\"insert python code\" \n``` \nYou can do this with any coding language. The output will look like this:\nprint(\"Hello World\")\n\n\nOther common rules\n\nHorizontal Rule\n\nYou can create a horizontal rule by using three consecutive hyphens (—) or three consecutive asterisks (***).\n\n--- or ***\nThis will produce a horizontal line break in your text like the following:\n\n\n\nLinks\n\nTo create a link, enclose the link text in square brackets and then follow it immediately with the URL in parentheses. As such: [example](https://www.example.com)\n\nThe rendered output looks like this: My example link is example\n\n\nImages\n\nTo add an image, add an exclamation mark (!), followed by alt text in brackets, and the path or URL to the image asset in parentheses. You can optionally add a title in quotation marks after the path or URL. As such: ![alt text](/path/to/image.jpg)\n\nThe rendered output looks like this:\n\n\n\nA River"
  },
  {
    "objectID": "lessons/unit_01/lesson_03/lesson_03.html#tips",
    "href": "lessons/unit_01/lesson_03/lesson_03.html#tips",
    "title": "Lesson 03: Writing in Markdown",
    "section": "Tips",
    "text": "Tips\n\nRefer back to the lesson content for guidance on Markdown syntax. Test your Markdown file by previewing it locally or using online Markdown editors.\nFeel free to explore additional Markdown features not covered in the lesson.\n\nHappy Markdowning! 🚀"
  },
  {
    "objectID": "lessons/unit_01/lesson_03/lesson_03.html#conclusion",
    "href": "lessons/unit_01/lesson_03/lesson_03.html#conclusion",
    "title": "Lesson 03: Writing in Markdown",
    "section": "Conclusion",
    "text": "Conclusion\nGood job completing this lesson! By now you should:\n\nHave fundamental knowledge of using Markdown\nHave created a README file using Markdown, with an image, a code block and working links."
  },
  {
    "objectID": "lessons/unit_01/lesson_03/lesson_03.html#faq",
    "href": "lessons/unit_01/lesson_03/lesson_03.html#faq",
    "title": "Lesson 03: Writing in Markdown",
    "section": "FAQ",
    "text": "FAQ"
  },
  {
    "objectID": "lessons/unit_01/lesson_03/lesson_03.html#resources",
    "href": "lessons/unit_01/lesson_03/lesson_03.html#resources",
    "title": "Lesson 03: Writing in Markdown",
    "section": "Resources",
    "text": "Resources\nMarkdown Cheatsheet\nInteractive Markdown Tutorial"
  },
  {
    "objectID": "lessons/unit_01/lesson_05/lesson_05.html",
    "href": "lessons/unit_01/lesson_05/lesson_05.html",
    "title": "Lesson 05: Organizing Your Github Repository",
    "section": "",
    "text": "This lesson will equip you with the most important principles to follow to organize your github repository in a way that makes the most impact."
  },
  {
    "objectID": "lessons/unit_01/lesson_05/lesson_05.html#overview",
    "href": "lessons/unit_01/lesson_05/lesson_05.html#overview",
    "title": "Lesson 05: Organizing Your Github Repository",
    "section": "",
    "text": "This lesson will equip you with the most important principles to follow to organize your github repository in a way that makes the most impact."
  },
  {
    "objectID": "lessons/unit_01/lesson_05/lesson_05.html#learning-objectives",
    "href": "lessons/unit_01/lesson_05/lesson_05.html#learning-objectives",
    "title": "Lesson 05: Organizing Your Github Repository",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nStudents will be able to effectively organize their github repository, irrespective of the project."
  },
  {
    "objectID": "lessons/unit_01/lesson_05/lesson_05.html#lesson",
    "href": "lessons/unit_01/lesson_05/lesson_05.html#lesson",
    "title": "Lesson 05: Organizing Your Github Repository",
    "section": "Lesson",
    "text": "Lesson\n\nWhat is a Github Repository and What Makes It Special?\nImagine a GitHub repository like a toolbox for coders. Instead of physical tools, it stores all the digital “tools” you will use to build projects, like code, instructions, and notes. Think of it like a box that holds one project like a website, game, or data analysis program. Inside the box are smaller boxes (folders) which organize different, and smaller, parts of the overall program like: main code, images, or data files.\nGithub repositories have version control. This means that it remembers every change made to the file and by whom, enabling you as a coder to go back to a previous version if needed. It also presents the capability of collaborating, or working together, with other coders on the same project. Finally Github repositories provide the ability to share your project with the world. It is like putting all you tools, designs and plans on a workbench for others to see and learn from.\nWhen you make your GitHub repository public, it gives anyone the ability to view your entire project. This innovation means that prospective employers or clients can, not only see your finished work, but can also see the efficiency of your code and how your work is organized. In the past, to get a programming position only interviews and maybe a little code writing was required but now employers want to see what sought of projects interest you and how you write and organize your code. Therefore, understanding the principles that will make your github projects easier to understand is very crucial.\n\n\nPrinciples of Organizing a GitHub Repository.\nBecause there are innumerable kinds of projects that can utilize github repositories, we will not focus on specific types of projects rather we will focus on general principles that should guide you regardless of what type of project you are embarking on.\n\nCreate a clear and intuitive directory structure. Divide your project into logical sections, such as “src” for source code, “docs” for documentation, and “tests” for test cases. Avoid clutter by keeping unrelated files out of the main project directory. Separation of Concerns:\nGroup related files together. For example, place source code files in one directory, documentation in another, and tests in a separate directory. Use subdirectories for different modules or components of your project. Descriptive File and Folder Names:\nChoose descriptive and meaningful names for your files and folders. This helps others quickly understand the purpose of each file or directory. Avoid generic names like “temp” or “misc” that don’t provide any insight into the content. README.md:\nInclude a well-written README.md at the root of your repository. This file should provide a high-level overview of your project, installation instructions, usage examples, and any other relevant information. Use markdown formatting to make your README visually appealing and easy to read. .gitignore:\nCreate a .gitignore file to specify files and directories that should be excluded from version control. This helps avoid unnecessary clutter and ensures that sensitive information (e.g., API keys) is not exposed. Documentation:\nKeep documentation in a separate “docs” directory or a dedicated documentation file. Use consistent and clear language to explain your code’s functionality, structure, and usage. Consider generating documentation using tools like Doxygen, Javadoc, or Sphinx. Versioning:\nIf your project evolves over time, consider using version numbers or tags to indicate significant releases. Use a version control system (like Git) to track changes and maintain a clear history of your codebase. Consistent Naming Conventions:\nAdopt consistent naming conventions for files, folders, and code variables. This enhances readability and makes it easier for others to navigate your code.\nInclude a license file (e.g., LICENSE.txt) to define the terms under which your code can be used, modified, and distributed. Choose a license that aligns with your intentions for sharing the code. Build and Configuration Files:\nPlace build scripts, configuration files, and other setup-related files in a dedicated directory. This ensures that they are separate from your source code.\n\n\nAdditional Tips:\n\nMaintain Activity: Keep your repositories updated with new commits and improvements. This shows employers you’re actively engaged in your code.\nCommunity Engagement: Respond to issues and pull requests promptly. Demonstrate your ability to collaborate and communicate effectively.\nTailor Your Profile: Consider showcasing projects relevant to the types of positions you’re applying for. Tailor your repository selection and descriptions accordingly.\nPin Your Best: GitHub allows pinning up to six repositories to the top of your profile. Choose your most impressive and relevant projects to showcase your skills.\n\nBy following these principles, you can create a well-organized and accessible GitHub repository that showcases your coding skills and makes it easier forpotential employees or clients to understand and contribute to your projects."
  },
  {
    "objectID": "lessons/unit_01/lesson_05/lesson_05.html#practice-activity",
    "href": "lessons/unit_01/lesson_05/lesson_05.html#practice-activity",
    "title": "Lesson 05: Organizing Your Github Repository",
    "section": "Practice Activity",
    "text": "Practice Activity\n\nCreate a Github repository.\nInstantiate a small project using the principles outlined above. The project can be any of your choice."
  },
  {
    "objectID": "lessons/unit_01/lesson_05/lesson_05.html#conclusion",
    "href": "lessons/unit_01/lesson_05/lesson_05.html#conclusion",
    "title": "Lesson 05: Organizing Your Github Repository",
    "section": "Conclusion",
    "text": "Conclusion\nYou should now understand what a github repository is and how it can help you to land positions in tech. You should also have understood the principles that lead to an accesible github project. These principles may be difficult to learn and implement at once, hence, it is important that you start creating your own projects and attempting to implement the principles taught in this lesson a little at a time till they become second nature.\nHappy Coding 😎🎊🎊"
  },
  {
    "objectID": "lessons/unit_01/lesson_05/lesson_05.html#faq",
    "href": "lessons/unit_01/lesson_05/lesson_05.html#faq",
    "title": "Lesson 05: Organizing Your Github Repository",
    "section": "FAQ",
    "text": "FAQ\n\nWhat kind of project should I experiment with?\nAny one you want! Feel free to experiment. You can search for project ideas on the internet.\n\n\nWhat if I get stuck and don’t know how a principle applies to the particular project I chose?\nDon’t stress. A lot of this comes with consistently doing projects. You can also look at big open-source projects to learn how the repositories are organized."
  },
  {
    "objectID": "lessons/unit_02/lesson_02/lesson_02.html",
    "href": "lessons/unit_02/lesson_02/lesson_02.html",
    "title": "Lesson 2: Installing Quarto",
    "section": "",
    "text": "This lesson will briefly explain Quarto and go over the steps necessary to create a install Quarto in Visual Studio Code (VScode)"
  },
  {
    "objectID": "lessons/unit_02/lesson_02/lesson_02.html#overview",
    "href": "lessons/unit_02/lesson_02/lesson_02.html#overview",
    "title": "Lesson 2: Installing Quarto",
    "section": "",
    "text": "This lesson will briefly explain Quarto and go over the steps necessary to create a install Quarto in Visual Studio Code (VScode)"
  },
  {
    "objectID": "lessons/unit_02/lesson_02/lesson_02.html#learning-objectives",
    "href": "lessons/unit_02/lesson_02/lesson_02.html#learning-objectives",
    "title": "Lesson 2: Installing Quarto",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nStudents will have a general idea of what quarto is and its uses.\nStudents will be able to download quarto.\nStudents will be able to install quarto.\nStudents will be able to preview quarto documents."
  },
  {
    "objectID": "lessons/unit_02/lesson_02/lesson_02.html#lesson",
    "href": "lessons/unit_02/lesson_02/lesson_02.html#lesson",
    "title": "Lesson 2: Installing Quarto",
    "section": "Lesson",
    "text": "Lesson\n\nA Quarto Overview\nQuarto is a dynamic open-source publishing system made to simplify the process of creating easily reproducible reports, articles, research,HTML, and other print and non-print documents. It is built on top of the exceptionally powerful Pandoc converter and uses a language syntax very similar to R markdown and other flavours of markdown.\nUnlike R markdown, Quarto is not tied to a specific language, infact it was made to be multi-lingual. As such, it supports Python, Julia, and Observable among others. The benefits of Quarto can be summarized as:\n\nDynamic Documents: Like R Markdown, Quarto allows you to create dynamic documents where you can embed code, text, and visualizations.\nMultilingual Support: Quarto supports multiple programming languages, making it versatile for different types of analysis. It’s not limited to R; you can use Python, Julia, and more.\nInteractive Documents: Quarto supports interactive documents with features like interactive graphics and code blocks. The document output can be PDF, EPUB, HTML, DOC, etcetera.\nReproducibility and Collaboration: Quarto emphasizes reproducibility by capturing the code, data, and dependencies needed to reproduce the document’s content. This makes it a powerful way for people to collaborate on projects as everyone can view everything about a report on a single doument.\n\n\nLinks\n\nhttps://quarto.org/\nhttps://www.infoworld.com/article/3666743/\nhttps://aeturrell.github.io/coding-for-economists/\nhttps://appsilon.com/interactive-clinical-reports-shiny-and-quarto/\n\n\n\n\nStep 01: Find and Download Quarto\n\n\n\nQuarto Download Page\n\n\n\nNavigate to the Quarto download page.\nOr use this link to access a static download.\nFor windows, click on the large blue link at the top of the page and the download should start.\nFor Mac OS, scroll down and click on the download link for Mac OS.\n\n\n\nStep 02: Install Quarto (For Windows)\n\nClick on the downloaded msi file. The setup wizard will start.\n\n\n\nClick next.\nIf you want all users on your computer to have access to Quarto select the radio button beside Install for all users of this machine, else, change nothing and just click next.\n\n\n\nClick next.\nLeave the install path as the default.\n\n\n\nClick next.\nThe installation will start. Wait for it to complete (Please do not turn of your system)\nWhen a message comes up, click on Finish.\n\n\n\n\nCongratulations 🎉😎\nYou have successfully installed Quarto\n\n\nStep 3: Enable Quarto Extension in VScode\n\nOpen vscode and click on the Extensions widget on the left panel of vscode.\n\n\n\nSearch for Quarto and click on the blue install button.\n\n\n\n\nStep 4: Rendering/Previewing Quarto files\n\nCreate a quarto file by clicking the file at the top-left in vscode and then selecting New File.. from the drop-down.\nFrom the new drop-down, select Quarto Document. A new untitled quarto document will be created with the following content:\n\n---\ntitle: \"Untitled\"\nformat: html\n---\n\nEdit and add content to your quarto file to make it look like this:\n\n---\ntitle: \"My First Quarto Code\"\nformat: html\n---\n\n### My name is {type your name here}\nI just finished installing quarto on **{input the date here}**\n\nClick on the preview button on the top-right of vscode. A dialog will pop up.\nName your file test.qmd (qmd is the file extension name for a quarto file) and click on save.\nClick the preview button again. A few things will run in the terminal. A preview panel will open on the right of vscode. The result should resemble the picture below (Except the name and date will be different)."
  },
  {
    "objectID": "lessons/unit_02/lesson_02/lesson_02.html#practice-activity",
    "href": "lessons/unit_02/lesson_02/lesson_02.html#practice-activity",
    "title": "Lesson 2: Installing Quarto",
    "section": "Practice Activity",
    "text": "Practice Activity\n\nMake a video explaining what you know about quarto and share your video with a classmate.\nDownload and install Quarto.\nCreate a new Quarto (.qmd) file and preview it.\nTake a screenshot of your screen (with the preview) and share to your group."
  },
  {
    "objectID": "lessons/unit_02/lesson_02/lesson_02.html#conclusion",
    "href": "lessons/unit_02/lesson_02/lesson_02.html#conclusion",
    "title": "Lesson 2: Installing Quarto",
    "section": "Conclusion",
    "text": "Conclusion\nYou should now have quarto installed and should have created a new quarto document. Quarto is a quick way to create a static webpage without having to understand HTML in detail."
  },
  {
    "objectID": "lessons/unit_02/lesson_02/lesson_02.html#installing-quarto---video-walkthrough-for-macos-users",
    "href": "lessons/unit_02/lesson_02/lesson_02.html#installing-quarto---video-walkthrough-for-macos-users",
    "title": "Lesson 2: Installing Quarto",
    "section": "Installing Quarto - Video Walkthrough (For MacOS Users)",
    "text": "Installing Quarto - Video Walkthrough (For MacOS Users)"
  },
  {
    "objectID": "lessons/unit_02/lesson_02/lesson_02.html#conclusion-1",
    "href": "lessons/unit_02/lesson_02/lesson_02.html#conclusion-1",
    "title": "Lesson 2: Installing Quarto",
    "section": "Conclusion",
    "text": "Conclusion\nYou should now have a basic understanding of the capabilities and use cases of Quarto. In future lessons you will utilize markdown to create web content and other documents."
  },
  {
    "objectID": "lessons/unit_02/lesson_02/lesson_02.html#faq",
    "href": "lessons/unit_02/lesson_02/lesson_02.html#faq",
    "title": "Lesson 2: Installing Quarto",
    "section": "FAQ",
    "text": "FAQ\n\nI cannot access the quarto download. What do I do?\nUse a free VPN on your device and change the location to somewhere in the United States. You can also use the static download availabel at the top of this webpage."
  },
  {
    "objectID": "lessons/unit_03/lesson_01/lesson_01.html",
    "href": "lessons/unit_03/lesson_01/lesson_01.html",
    "title": "Lesson 01: Creating Your First Website with Quarto",
    "section": "",
    "text": "You will learn to create a personalized website using Quarto. You will build a foundational About Me page, add new sections like Blog Posts and Contact, and render your site with quarto render. You will also be introduced to working with to YAML files."
  },
  {
    "objectID": "lessons/unit_03/lesson_01/lesson_01.html#overview",
    "href": "lessons/unit_03/lesson_01/lesson_01.html#overview",
    "title": "Lesson 01: Creating Your First Website with Quarto",
    "section": "",
    "text": "You will learn to create a personalized website using Quarto. You will build a foundational About Me page, add new sections like Blog Posts and Contact, and render your site with quarto render. You will also be introduced to working with to YAML files."
  },
  {
    "objectID": "lessons/unit_03/lesson_01/lesson_01.html#learning-objectives",
    "href": "lessons/unit_03/lesson_01/lesson_01.html#learning-objectives",
    "title": "Lesson 01: Creating Your First Website with Quarto",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nStudents will know how to create and have a basic website using Quarto\nStudents will know how to add new pages to their website and work with YAML\nStudents will be able to render the website using quarto render."
  },
  {
    "objectID": "lessons/unit_03/lesson_01/lesson_01.html#prerequisites",
    "href": "lessons/unit_03/lesson_01/lesson_01.html#prerequisites",
    "title": "Lesson 01: Creating Your First Website with Quarto",
    "section": "Prerequisites",
    "text": "Prerequisites\n\nStudents should have Visual Studio Code and the Quarto extension installed on their computer. Refer to our lessons on VS Code and Quarto if you don’t have it already."
  },
  {
    "objectID": "lessons/unit_03/lesson_01/lesson_01.html#why-quarto-for-creating-websites",
    "href": "lessons/unit_03/lesson_01/lesson_01.html#why-quarto-for-creating-websites",
    "title": "Lesson 01: Creating Your First Website with Quarto",
    "section": "Why Quarto for Creating Websites?",
    "text": "Why Quarto for Creating Websites?\nReproducibility: Quarto ensures reproducibility by combining content, code, and results into a single document. This is vital for maintaining consistency and transparency in web development projects.\nFlexibility with Markdown and Code: Quarto empowers users to seamlessly blend Markdown for content and code for interactivity. This flexibility allows for easy integration of data analysis, visualizations, and narrative—all within a single environment.\nEffortless Document Structuring: With Quarto’s intuitive structure, creating and organizing pages becomes straightforward. Its simplicity enables quick addition of new content, making it an ideal choice for both beginners and experienced users in the website development realm."
  },
  {
    "objectID": "lessons/unit_03/lesson_01/lesson_01.html#getting-started-with-building-your-first-website",
    "href": "lessons/unit_03/lesson_01/lesson_01.html#getting-started-with-building-your-first-website",
    "title": "Lesson 01: Creating Your First Website with Quarto",
    "section": "Getting started with building your first website",
    "text": "Getting started with building your first website\n\nOpen Visual Studio Code (VS Code)\nIn VS Code, execute the Quarto: Create Project command from the command-palette:\n\n\n\nExecuting the Quarto: Create Project\n\n\nThen, select Website Project:\n\n\n\nSelecting Website Project\n\n\nYou’ll be prompted to select a parent directory/folder to create the project within. Then, you’ll be asked to name the directory/folder for your website project. For example, Quarto Project:\n\n\n\nSelecting Folder\n\n\nThe new website project will be created and opened within VS Code. Click the Render button to preview the website:\n\n\n\nRendering the website\n\n\n\n\nThe quarto.yml file holds metadata such as the title of the document, author information, and other details that help describe and identify the document.\n\n\n\nYAML Navigation\n\n\nIn the above image, the left side contains a YAML file that contains the metadata.\nThe title of the website is called Quarto Website,\nThe navbar is essentially a navigation bar that helps users easily navigate through different sections or pages of the website. Each item in the left navigation specifies a page or a link, and the text attribute defines the text that will be displayed for that link.\nIf we want to add two new pages (blog_post.qmd and contact.qmd) to the main About Me page we first create the qmd files, then add the files in the navbar section in the .yml file.\n\n\n\nAdding Pages"
  },
  {
    "objectID": "lessons/unit_03/lesson_01/lesson_01.html#practice-activity",
    "href": "lessons/unit_03/lesson_01/lesson_01.html#practice-activity",
    "title": "Lesson 01: Creating Your First Website with Quarto",
    "section": "Practice Activity",
    "text": "Practice Activity\n\nAdd New Page to your Website\n\nAdd a new Contact Page to your website.\nThe qmd file should be ‘contact.qmd’.\nAdd ‘Contact’ as the heading\nDo not forget to link to it in the YAML file.\n\nYour new page should look like this :\nYou can fill out the Contact Page if you’re feeling motivated\n\n\nFill out the ‘about.qmd’\n\nFill out the ‘About’ page with a description of yourself in the ‘about.qmd’.\nDon’t forget to add ‘About’ as the header.\n\nYour About page should look like this :"
  },
  {
    "objectID": "lessons/unit_03/lesson_01/lesson_01.html#conclusion",
    "href": "lessons/unit_03/lesson_01/lesson_01.html#conclusion",
    "title": "Lesson 01: Creating Your First Website with Quarto",
    "section": "Conclusion",
    "text": "Conclusion\nGreat job with this lesson! By now you should:\n\nKnow how to create and have your website running locally with Quarto.\nKnow how to add more pages to your website.\nKnow how to work with YAML files in Quarto."
  },
  {
    "objectID": "lessons/unit_bonus/css/customizing_css.html",
    "href": "lessons/unit_bonus/css/customizing_css.html",
    "title": "CSS Selectors Table",
    "section": "",
    "text": "Say we have a basic paragraph, like the one below. The boring gray text isn’t very exciting. With CSS, there is a better way.\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Porta lorem mollis aliquam ut. Quam id leo in vitae turpis massa sed elementum tempus. Ullamcorper malesuada proin libero nunc. Morbi blandit cursus risus at ultrices mi. Ultrices gravida dictum fusce ut placerat. Vitae tortor condimentum lacinia quis…\n\n\nInstead of this gray text, let’s theme our appearance to more of a “dracula” color theme. Compare the paragraph below to the paragraph above.\n\nThis is a Dracula-themed paragraph with colored text, a darker background, and a purple border. You can add some green,  some yellow,  and even some pink accents for a better theme!"
  },
  {
    "objectID": "lessons/unit_bonus/css/customizing_css.html#overview",
    "href": "lessons/unit_bonus/css/customizing_css.html#overview",
    "title": "CSS Selectors Table",
    "section": "",
    "text": "Say we have a basic paragraph, like the one below. The boring gray text isn’t very exciting. With CSS, there is a better way.\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Porta lorem mollis aliquam ut. Quam id leo in vitae turpis massa sed elementum tempus. Ullamcorper malesuada proin libero nunc. Morbi blandit cursus risus at ultrices mi. Ultrices gravida dictum fusce ut placerat. Vitae tortor condimentum lacinia quis…\n\n\nInstead of this gray text, let’s theme our appearance to more of a “dracula” color theme. Compare the paragraph below to the paragraph above.\n\nThis is a Dracula-themed paragraph with colored text, a darker background, and a purple border. You can add some green,  some yellow,  and even some pink accents for a better theme!"
  },
  {
    "objectID": "lessons/unit_bonus/css/customizing_css.html#learning-objectives",
    "href": "lessons/unit_bonus/css/customizing_css.html#learning-objectives",
    "title": "CSS Selectors Table",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nStudents will understand the use of CSS\nStudents will learn how to use CSS for basic styling such as font sizes, font color, background colors, and more\nStudents will understand the cascading element of CSS"
  },
  {
    "objectID": "lessons/unit_bonus/css/customizing_css.html#lesson",
    "href": "lessons/unit_bonus/css/customizing_css.html#lesson",
    "title": "CSS Selectors Table",
    "section": "Lesson",
    "text": "Lesson\nBefore we get into CSS, let’s take a step back. What is it used for? When is it used? How is it used? In web development there are three major languages: HTML, CSS, and JavaScript. Let’s briefly discuss these.\n\nHTML (HyperText Markup Language):\nIn unit one of the course, you learned about Markdown. HTML is similar. They effectively do the same thing. Their difference is markdown is easier to write but less capable than HTML. HTML is more difficult to write but is far more capable.\nThink of HTML as the skeleton of a website. Imagine your body without any skin, just bones. HTML gives structure to web pages, like how bones give shape to your body. It tells the web browser what each part of the webpage is, like headings, paragraphs, images, and links. These parts are wrapped in tags, like labels, so the browser knows how to show them.\n\n\nCSS (Cascading Style Sheets):\nNow, think of CSS as the clothes and colors you put on the skeleton to make it look cool! CSS adds style and design to the webpage. It decides how things look, like the colors, fonts, spacing, and layout. It’s like magic paint that changes how the webpage appears, making it look pretty and interesting.\nSo, HTML sets up the structure, and CSS makes it look awesome! They work together to create websites that are both organized and cool-looking, just like putting together a fun puzzle!\n\n\nJavaScript\nJavaScript is like the brain of a website. Imagine your body with a brain that makes decisions and does things. JavaScript adds life, interactivity, and intelligence to web pages. It’s like the brain that makes things happen and responds to what you do, making websites more engaging and fun to use.\nShort recap: - HTML: Provides the structure and content of a webpage. - CSS: Enhances the appearance and styling of HTML elements. - JavaScript: Adds interactivity and dynamic behavior to web pages.\n\n\nCSS Cascades\nCSS stands for “Cascading Styling Sheets”, what does this mean? It’s built on the idea that you can have a blank statement that all font should be size 12 across a website. This will be true for the entire website, until a more specific rule is applied. While that rule is still in effect, another rule can be applied for a section of the website, like the customer support section, that all the background colors should be light yellow. This means that this section of the website will have size 12 font and a light yellow background.\nNow, say we’re editing a specific line in this section with 12 point font and a yellow background. If we apply a more specific rule that the font should be size 16 in this specific area, this most specific rule overrides the existing rules for this area.\n\n\nHow to Use CSS in Quarto\nThere are three standard ways to write CSS: inline, embedded in head tag, and external. We will only cover inline and external.\n\nInline\nImagine you’re drawing a picture, and you want to color one part of it differently from the rest. You could take a colored marker and draw over that part directly, right? That’s similar to how inline CSS works.\nWith inline CSS, you add styling directly to individual HTML elements using the “style” attribute. Here’s an example:\n&lt;p style=\"color: blue; font-size: 18px;\"&gt;This text is blue and bigger!&lt;/p&gt;\nIn this example, the style attribute is added to the\n\ntag, and it contains CSS rules (like color: blue; and font-size: 18px;) that specify how the text inside the paragraph should look. This way, you’re directly applying styling to that specific paragraph.\n\n\nExternal\nNow, let’s say you’re drawing a big picture with lots of different parts, and you want them all to have the same style. Instead of coloring each part individually, you could prepare a set of colored markers and use them whenever needed. That’s similar to how external CSS works.\nWith external CSS, you create a separate CSS file that contains all your styling rules. Here’s an example:\np {\n    color: blue;\n    font-size: 18px;\n}\nIn this CSS file, we’ve defined styling rules for\n\nelements to make their text blue and bigger. Now, to apply these styles to our quarto document, we link the CSS file using under html in the yaml header as shown below\n---\ntitle: \"My Document\"\nformat:\n  html:\n    css: styles.css\n---\n\n\n\nCSS Selectors\nWhat is a CSS Selector? Now, let’s imagine you are building a website like a big playground! Each element on the page, like pictures, buttons, or text, is like a building block. CSS Selectors are like special tools that let you point and say, “Hey, you in a blue shirt and red hat, I want you to do THIS!”.\nUsing this scenario, it is safe to say that css selectors help us identify and interact with html tags. The knowledge of the tags, will enable us use css selectors and apply a set of rules and styling to the HTML element tag.\nThere are many different types of CSS selector that allow you to target rules to specific elements in an HTML document as shown in the table below.\n\n\n\n\nSelector\n\n\nMeaning\n\n\nExample\n\n\n\n\n\n\n\nUniversal Selector\n\n\nApplies to all elements in the document\n\n\n* {}Targets all elements on the page\n\n\n\n\n\nType Selector\n\n\nMatches element names\n\n\nh1, h2, h3 {}Targets the &lt;h1&gt;, &lt;h2&gt;, and &lt;h3&gt; elements\n\n\n\n\n\nClass Selector\n\n\nMatches an element whose class attribute has a value that matches the one specified after the period (or full stop) symbol\n\n\n.note {}Targets any element whose class attribute has a value of note\n\n\n\n\n\nID Selector\n\n\nMatches an element whose id attribute has a value that matches the one specified after the pound or hash symbol\n\n\n#introduction {}Targets the element whose id attribute has a value of introduction\n\n\n\n\n\nChild Selector\n\n\nMatches an element that is a direct child of another\n\n\nli&gt;a {}Targets any &lt;a&gt; elements that are children of an &lt;li&gt; element\n\n\n\n\n\nDescendant Selector\n\n\nMatches an element that is a descendent of another specified element (not just a direct child of that element)\n\n\np a {}Targets any &lt;a&gt; elements that sit inside a &lt;p&gt; element, even if there are other elements nested between them\n\n\n\n\n\nAdjacent Sibling Selector\n\n\nMatches an element that is the next sibling of another\n\n\nh1+p {}Targets the first &lt;p&gt; element after any &lt;h1&gt; element\n\n\n\n\n\nGeneral Sibling Selector\n\n\nMatches an element that is a sibling of another, although it does not have to be the directly preceding element\n\n\nh1~p {}If you had two &lt;p&gt; elements that are siblings of an &lt;h1&gt; element, this rule would apply to both\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCSS Properties and Values\nText styling is one of the fundamental aspects of web design. It not only improves readability but also enhances the overall aesthestics of a webpage.\nIn brief, a CSS property affects how elements are displayed in a webpage.\nCSS declarations sit inside curly brackets and each is made up of two parts: a property and a value, separated by a colon. You can specify several properties in one declaration, each separated by a semi-colon. As shown in the image below;\n\nThis rule indicates that all &lt;h1&gt;, &lt;h2&gt; and &lt;h3&gt; elements should be shown in the Arial typeface, in a yellow color.\nProperties indicate the aspects of the element you want to change. For example, color, font, width, height and border.\nValues specify the settings you want to use for the chosen properties. For example, if you want to specify a color property then the value is the color you want the text in these elements to be.\nIn this lesson, we will explore various CSS properties that can be used to style text and fonts. Some of those properties are as follows;\n\nColor: The color property specifies the color of the text inside an element. It can accept various formats, including keywords like\n\nred,\nHEX (#ff0000),\nRGB (rgb(255, 0, 0)), etc…\n\n\nExample:\n    color: blue; #will set the text color to blue.\n\nFont-Family: This property specifies the font for the text. It can be a specific font (e.g., Arial), a generic family (e.g., sans-serif), or a list of fonts, known as a “font stack,” where the browser will use the first available font.\n\nExample:\n    font-family: \"Times New Roman\", serif;\nuses “Times New ROman” if available, otherwise falls back to any available serif font.\n\nFont-Size: font-size determines the size of the font. Font-size can be specified in different units, such as;\n\n\nPixels (px),\nOiubts (pt),\nems (em),\nPercentages (%)\n\nExample:\n    font-size: 16px; #Sets the font size to 16 pixels.\n\nFont-Weight: Controls the thickness of the text. Some font-weight include;\n\n\nnormal\nbold\nbolder\nlighter\nor numerical values ranging from 100-900.\n\nExample:\n    font-weight: bold; #makes the text bold.\n\nText-Align: This Css property aligns text horizontally within it’s containing element. Possible values are\n\n\nleft,\nright,\ncenter,\njustify\n\nExample:\n    text-align: center; #this centers the text.\n\nText-Decoration: Adds decorative elements to text, such as;\n\nunderlines,\noverlines,\nline-throughs,\nor a combination of the ones listed above\n\n\nExample:\n    text-decoration: underline; #underlines the text.\n\nText-Transform: Text Transform controls the capitalization of text. The values includes the following;\n\n\nnone,\ncapitalize (first letter of each word is capitalized),\nuppercase (all letters are uppercase),\nlowercase (all letters are lowercase). etc.\n\n\nLine-Height: Sets the height of a line of text, affecting the space between the lines in a paragraph. Line height\n\n\nCan be a number (without units, which acts as a multiplier to the font size)\nlength (px, em, etc.),\nor precentage.\n\nExample:\n    line-height: 1.5; #sets the line height to 1.5 times the font size.\nThe purpose of line-height is to enhance readability.\n\nLetter-Spacing and Word-Spacing: These properties control the space between letters and words, respectively. They can accept values like normal or lengths (e.g., 2px).\n\nExample:\n    letter-spacing: 1px; #increases the space between letters by 1 pixel.\n\n\nText\nText styling and formatting plays an important role on the appearances and structure of texts in a website. We’ll explore how to control the appearance of your text, adding personality and impact to your web pages. Buckle up, and let’s dive into the world of font properties!\n1. Coloring Your Words: The Magic of color\nImagine writing with a rainbow of colors instead of a plain black ink! The color property lets you do just that! You can apply an color imaginable using either it color-name(red, blue) or HEX values(#FF0000) just as we discussed in the CSS Properties and Values section.\nThe Example below will change the text color to Red;\n  &lt;p style=\"color: #FF0000;\"&gt;This text is a red color!&lt;/p&gt;\nOutcome:\n\n\nThis text is a red color!\n\n\nBonus Tips: You can use this link color_wheel to choose colors for your web page styling.\n2. Sizing Up: The font-size Property\nDO you want your text to whisper softly or shout out from the rooftops? The font-size property controls the size of your font. Fonts sizes are measured in various units like pixels, point, or even relative sizes like larger(em) or smaller(rem). This was discussed in the CSS properties and values section above.\nImage of Units Of Type Size \nExample:\n  &lt;h1&gt;This heading is big and bold!&lt;/h1&gt;\n  &lt;p style=\"font-size: 1.5em;\"&gt;This paragraph is slightly larger than the default size.&lt;/p&gt;\nOutcome:\n\n\nThis heading is big and bold!\n\n\nThis paragraph is slightly larger than the default size.\n\n\n3. Font Family: The Power of font-family\nThe world has more than just Times New Roman! Use the font-family prperty to choose from a wide variety of fonts installed on the user’s system. Remember, you have to specify multiple options as a fallback in case the user’s systems doesn’t have your first choice.\nExample:\n  &lt;p style=\"font-family: 'Courier New', monospace;\"&gt;This text uses a typewriter-like font style.&lt;/p&gt;\n&lt;p style=\"font-family: 'Playfair Display', serif;\"&gt;This one uses a fancy serif font.&lt;/p&gt;\nImage of Typeface Terminology \nOutcome:\n\n\nThis text uses a typewriter-like font style.\n\n\nThis one uses a fancy serif font.\n\n\n4. Fine-Tuning Your Font: font-style, font-weight, and font-variant\nDo you want your text to be italic, bold, or even underlined? Explore the possibilities with these properties:\n\nfont-style: Choose between normal, italic, or oblique styles.\nfont-weight: Make your text light, bold, or even heavier with iptions like 400, 700 etc.\nfont-variant: Apply decorative effects like small-caps or superscript/subscript.\n\nExample:\n  &lt;p style=\"font-style: italic;\"&gt;This text is italicized.&lt;/p&gt;\n  &lt;p style=\"font-weight: bold;\"&gt;This one is bold and strong!&lt;/p&gt;\n  &lt;p style=\"font-variant: small-caps;\"&gt;This text uses small caps.&lt;/p&gt;\nOutcome:\n\n\nThis text is italicized.\n\n\nThis one is bold and strong!\n\n\nThis text uses small caps.\n\n\n\n\nStyling Background\nIn this section we will explore how to add colors, images and control their positioning to create visually stunning and engaging layout.\n1. Painting the Backgorund: The Magic of background-color Imagine giving your web page a whole new look with just one brushstroke! The backgorund-color property let’s you set a solid color for the entire background. Choose any color using it’s name(e.g blue) or it’s hexadecimal code (e.g., #0000FF for blue).\nExample:\n    body {\n    background-color: #F0F0F0; /* Light gray background for the whole page */\n  }\n2. Bringing Pictures to Life: The Power of background-image\nWith the background-image property, you can showcase a beautiful image as your background. Enter the background-image property! Specify the image path, and your chosen image will grace your web page.\nExample:\n  &lt;div class=\"hero-section\" style=\"background-image: url('images/hero-banner.jpg');\"&gt;\n  &lt;h1&gt;Welcome to Our Website!&lt;/h1&gt;\n  &lt;/div&gt;\n3. Positioning and Repeating Images: background-position and background-repeat\nDon’t let your background image sit awkwardly! Use these properties to fine-tune its placement and behavior:\nbackground-position: Control the X and Y coordinates of the image or use keywords like center, top, etc.\nbackground-repeat: Decide whether the image repeats itself (e.g., repeat) or covers the area once (no-repeat).\nBonus Tip: Explore online resources like Google Fonts and Font Awesome for more font options and inspiration!\n4. Defining Boundaries and Dimension: Borders and Box Shadows\nWelcome to the realm of visual definition! In this section, we will explore how to add borders and box shadows to your web elements, enchancing their visual hierarchy and creating a sense of depth and dimension.\n\nDrawing Lines: The Power of border\n\nImagine building walls around your elements to seperate and define them. The border property let’s you do just that, creating a single line border around an html element. You can customize it’s width, style, and color to achieve the desired visual effect. Example:\n  h2 {\n    border: 5px solid #ccc; /* 3px wide solid border in light gray */\n}\n.button {\n    border: 5px dashed #333; /* 2px dashed border in dark gray */\n}\nOutcome:\n\n5. Beyond Lines: Fine-Tuning with border-width, border-style, and border-color\nWant to control the thickness, pattern, and color of your borders individually? Enter these properties:\n\nborder-width: Set the thickness in pixels (px) or other units.\nborder-style: Choose from styles like solid, dashed, dotted, etc.\nborder-color: Apply any color using names or hex values.\n\nExample:\n  p.one {\n  border-top: 5px solid #FF0000; /* Thick red border on top only */\n}\n  p.two {\n    border: 5px solid #ddd; /* Thin gray border all around */\n    border-right-color: #000; /* Change right border color */\n}\nOutcome:\n\n6. Adding Depth: The Magic of box-shadow\nWant to elevate your elements and create a sense of dimension? The box-shadow property allows you to add shadows around elements, mimicking real-life light and depth perception.\nExample:\n.card {\n  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.3); /* Subtle shadow below the card */\n}\n.button:hover {\n  box-shadow: 0px 3px 8px rgba(0, 0, 0, 0.5); /* Grow shadow on hover */\n}\nOutcome:"
  },
  {
    "objectID": "lessons/unit_bonus/css/customizing_css.html#practice-activity-stylish-web-page-creation",
    "href": "lessons/unit_bonus/css/customizing_css.html#practice-activity-stylish-web-page-creation",
    "title": "CSS Selectors Table",
    "section": "Practice Activity: Stylish Web Page Creation",
    "text": "Practice Activity: Stylish Web Page Creation\nObjective: Create a stylish web page that incorporates various CSS styling techniques covered in the lesson. This activity will test your understanding of CSS properties, selectors, text styling, background styling, and border & shadow effects.\n\nRequirements:\nPage Structure and Content:\nCreate an HTML file with basic content including a heading &lt;h1&gt;, a few paragraphs &lt;p&gt;, and a list &lt;ul&gt; or &lt;ol&gt;. Include a section that introduces a fictional character, product, or service. This section should have a title, a description, and at least one image.\n\n\nStyling with CSS:\n\nText Styling: Use various CSS properties to style the text in your HTML document. Experiment with different font-family, font-size, color, text-align, text-decoration, and font-weight values to achieve an aesthetically pleasing look.\nBackground Styling: Apply a background-color to the body of the document and use a background-image for at least one section. Ensure the text remains readable over the background.\nBorder and Shadow: Add borders to some elements like the image or the section containing it. Use border-radius to create rounded corners. Apply a box-shadow to elevate a specific element, such as a call-to-action button or the image."
  },
  {
    "objectID": "lessons/unit_bonus/css/customizing_css.html#conclusion",
    "href": "lessons/unit_bonus/css/customizing_css.html#conclusion",
    "title": "CSS Selectors Table",
    "section": "Conclusion",
    "text": "Conclusion\nThroughout this lesson, we’ve taken a deep dive into the world of CSS, learning how to manipulate the appearance and style of web pages. We started with the fundamental concepts of selectors, properties, and values, and then explored various properties for styling text, backgrounds, borders, and shadows.\nBy now, you should be able to confidently:\n\nIdentify and target elements on a webpage using different CSS selectors.\nApply various CSS properties to customize the appearance of those elements.\nUnderstand the cascading nature of CSS and how styles are applied.\nCreate basic visual themes and layouts using your newfound CSS skills.\nRemember, CSS is a vast and powerful tool, and this lesson has just scratched the surface. As you continue your exploration, you’ll discover even more possibilities to bring your web pages to life and express your unique design vision. Here are some additional resources to fuel your journey:\n\n\nInteractive CSS Tutorials: Websites like Codecademy and Khan Academy offer interactive tutorials that allow you to learn CSS by doing.\nCSS Cheat Sheet: Keep a quick reference sheet summarizing common CSS properties and values handy for easy lookup.\nOnline Design Tools: Experiment with online design tools like Figma or Adobe XD to visualize your styles before coding them. Don’t be afraid to experiment, explore, and unleash your creativity! The world of CSS awaits your unique touch."
  },
  {
    "objectID": "lessons/unit_bonus/css/customizing_css.html#faq",
    "href": "lessons/unit_bonus/css/customizing_css.html#faq",
    "title": "CSS Selectors Table",
    "section": "FAQ",
    "text": "FAQ"
  },
  {
    "objectID": "lessons/unit_bonus/css/customizing_css.html#image-references",
    "href": "lessons/unit_bonus/css/customizing_css.html#image-references",
    "title": "CSS Selectors Table",
    "section": "Image References:",
    "text": "Image References:\n\ngoogle\nHTML & CSS Design and Build Websites by Jon Duckett"
  },
  {
    "objectID": "tools/r_installation.html",
    "href": "tools/r_installation.html",
    "title": "R Installation",
    "section": "",
    "text": "What is R?\nR is a programming language developed by Ross Ihaka and Robert Gentleman designed for statistical programming. It is primarily focused on data wrangling and visualization.\nAs the phrase “programming language” suggests, R is a language used to instruct a computer to carry out complex commands. Like most any other language you will need to understand its grammar and syntax in order to fluently “speak” it. The more fluent you become in it, the easier it will be for you to communicate your wants and desires to it.\n\n\nInstalling R\n\nGo to cloud.r-project.org\nClick on the download link for your computer system. For example if you are using a windows computer click “Download R for Windows”\nClick on “base”\nClick on the download version for the current version of R. (At time of writing the button says “Download R-4.3.1 for Windows” on a windows computer.) Make sure you know where you save the downloaded file so that you can run the installer.\nNavigate to the downloaded file and run the installer by double clicking. (Usually it is title something like “R-4.3.1-win”) Follow the steps for the installation wizard. It is highly recommended you just keep the recommended installation settings especially if you haven’t done this before.\nR should now be properly installed. We’ll show you how to check it properly in the next tutorial “Installing R Studio”"
  },
  {
    "objectID": "lessons/unit_03/lesson_03/lesson_03.html",
    "href": "lessons/unit_03/lesson_03/lesson_03.html",
    "title": "Lesson 03: Subpages and Nav Bars",
    "section": "",
    "text": "This lesson will provide an overview of using subpages in Quarto and navigation options."
  },
  {
    "objectID": "lessons/unit_03/lesson_03/lesson_03.html#overview",
    "href": "lessons/unit_03/lesson_03/lesson_03.html#overview",
    "title": "Lesson 03: Subpages and Nav Bars",
    "section": "",
    "text": "This lesson will provide an overview of using subpages in Quarto and navigation options."
  },
  {
    "objectID": "lessons/unit_03/lesson_03/lesson_03.html#learning-objectives",
    "href": "lessons/unit_03/lesson_03/lesson_03.html#learning-objectives",
    "title": "Lesson 03: Subpages and Nav Bars",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nStudents will understand the purpose of subpages\nStudents will understand the purpose of a Nav bar\nStudents will be able to edit the website YAML\nStudents will create a website with a nav bar and subpages"
  },
  {
    "objectID": "lessons/unit_03/lesson_03/lesson_03.html#lesson",
    "href": "lessons/unit_03/lesson_03/lesson_03.html#lesson",
    "title": "Lesson 03: Subpages and Nav Bars",
    "section": "Lesson",
    "text": "Lesson\n\nBackground\nHaving multiple pages and a way to navigate them allows the developer to separate content and ideas. This benefits the user with an organizational structure that is familiar. A navigation bar is a fundamental element of website design that plays a crucial role in helping users navigate, understand, and interact with the content and features of a site or application. By default your webiste will be built with a nav bar. This lesson will teach you how to add content and customize the nav bar.\n\n\nCreating a New Page\nStep one is to create a new .qmd document that will become our new page. This should be a review from Unit 2 Lesson 2. Make sure to add this file to your already existing website that you created in a previous lesson.\n\nCreate a quarto file by clicking the new file icon at the top-left in VSCode or right-clicking in the folder and selecting new file. Give the page file a name and end with .qmd\n\n\n\nAdd a title in the YAML and some markdown content underneath like such:\n\n\n\n\nLinking the New Page to the YAML\nStep two is changing our metadata file, by default this will be named _quarto.yml. This file is referred to as a YAML. A YAML is used to specify various settings and configurations related to the document’s formatting, layout, styling, and other properties.\n\nStep three is to now render or preview your index.html file after everthing is connected and saved. This allows quarto to output the html files and all other supporting files that creates our website.\nAfter these changes push your work to git hub as shown in 3 Lesson 2 and your website should update. You have now successfully connected your new page to the website! It should look something like this:\n\nNow we will explore formatting options so you can customize your website to your personal preferences.\n\n\nFormatting\n\nNavigation Bar\nYour _quarto.yml page contains the informaiton on how you want the webite formated. By default the website uses a navigation bar oriented at the top of the page. And should look like the image on your right.\n\n\nwebsite:\n  title: \"Quarto Website\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n      - newpage.qmd\n\n\n\n\n\n\nMenu\nIf we don’t like the default nav bar we can do a couple things to change it. Notice in the code below I use right: this will take the contents of our nav bar and align them right. Next I added a menu item that will create a dropdown with all of our pages title Menu. Note you can create multiple menus for your website.\n\n\nwebsite:\n  title: \"Quarto Website\"\n  navbar:\n    right:\n    - text: 'Menu'\n      menu:\n        - href: index.qmd\n          text: Home\n        - about.qmd\n        - newpage.qmd\n\n\n\n\n\n\nSide Bar\nIf we want a side bar as opposed to a nav bar all we need to change is the navbar: to sidebar:. The style docked gives the navigation panel a gray background to seperate from the white page. You can remove this if you want it to blend with the page. Also not you need to specify the contents: for this code to work properly.\n\n\nwebsite:\n  title: \"Quarto Website\"\n  sidebar:\n    style: docked\n    contents: \n        - href: index.qmd\n          text: Home\n        - about.qmd\n        - newpage.qmd\n\n\n\n\n\n\nSections\nLastly If you want a similar effect like menu with the nav bar you need to use section:. Notive you can give you section a title right after the section: code, my section is titled Pages. Note you can have multiple secitons which would be beneficial to seperate your content.\n\n\nwebsite:\n  title: \"Quarto Website\"\n  sidebar:\n    style: docked\n    contents: \n      section: 'Pages'\n      contents: \n        - href: index.qmd\n          text: Home\n        - about.qmd\n        - newpage.qmd\n\n\n\n\nI recommend going to the Quarto website and seeing how you can turn the YAML parameters to continue to make your website personal.\nMore Details on navigation in quarto to be found here.\nNote: If you want to change the colors of your web page look into changing the theme: element in your YAML"
  },
  {
    "objectID": "lessons/unit_03/lesson_03/lesson_03.html#practice-activity",
    "href": "lessons/unit_03/lesson_03/lesson_03.html#practice-activity",
    "title": "Lesson 03: Subpages and Nav Bars",
    "section": "Practice Activity",
    "text": "Practice Activity\n\nAdd a New Page to your Website\n\nAdd a new Contact Page to your website.\nThe qmd file should be ‘contact.qmd’.\nAdd ‘Contact’ as the heading\nDo not forget to link to it in the YAML file\n\nYour new page should look something like this :"
  },
  {
    "objectID": "lessons/unit_03/lesson_03/lesson_03.html#conclusion",
    "href": "lessons/unit_03/lesson_03/lesson_03.html#conclusion",
    "title": "Lesson 03: Subpages and Nav Bars",
    "section": "Conclusion",
    "text": "Conclusion\nWith the ability to create subpages and the flexibility to design navigation interfaces, you are capable of building an organized website. Congratulations, with Quarto on your toolbelt you can build structured and useful websites that could benefit the lives of many!"
  },
  {
    "objectID": "lessons/unit_03/lesson_03/lesson_03.html#faq",
    "href": "lessons/unit_03/lesson_03/lesson_03.html#faq",
    "title": "Lesson 03: Subpages and Nav Bars",
    "section": "FAQ",
    "text": "FAQ"
  },
  {
    "objectID": "lessons/unit_bonus/Quarto_Theming/quarto_theming.html",
    "href": "lessons/unit_bonus/Quarto_Theming/quarto_theming.html",
    "title": "Quarto Themimg",
    "section": "",
    "text": "In this lesson, we’ll go through using Quarto’s support for building a website theme and implement it throughout your site."
  },
  {
    "objectID": "lessons/unit_bonus/Quarto_Theming/quarto_theming.html#overview",
    "href": "lessons/unit_bonus/Quarto_Theming/quarto_theming.html#overview",
    "title": "Quarto Themimg",
    "section": "",
    "text": "In this lesson, we’ll go through using Quarto’s support for building a website theme and implement it throughout your site."
  },
  {
    "objectID": "lessons/unit_bonus/Quarto_Theming/quarto_theming.html#learning-objectives",
    "href": "lessons/unit_bonus/Quarto_Theming/quarto_theming.html#learning-objectives",
    "title": "Quarto Themimg",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nStudents will be able to apply their own theme on existing Quarto website."
  },
  {
    "objectID": "lessons/unit_bonus/Quarto_Theming/quarto_theming.html#lesson",
    "href": "lessons/unit_bonus/Quarto_Theming/quarto_theming.html#lesson",
    "title": "Quarto Themimg",
    "section": "Lesson",
    "text": "Lesson\n\nQuarto Theming\nThemes can be used to change the default color and style of a Quarto website,\nQuarto has more than 20 pre-built themes provided by Bootswatch.com - A free theming platform for the Bootstrap web development framework. Some of those themes include:\n\nflatly\nlumen\nquartz\nsandstone\ncosmo\n\nYou can find a complete list of available themes at Quarto Themes\nThese themes provide several default options to change the main website font, standard font size, font color, color of hyperlinks and other customization.\nQuarto allows for further customization of the prebuilt themes to fit your style and even adding entirely custom themes. This would require editing the appropriate section of the _quarto.yml.\n\n\nQuarto Yaml Editing\nTo change your website theme, we go into the *_quarto.yml* file, navigate to the theme option, and change it to any of the prebuilt themes we want.\nformat:\n    html:\n        theme: cosmo\nHere the theme is set to cosmo.\nTheme options can be used to further customize a theme and set the default choice for the entire document. These options include:\n\nmax-width: Sets the maximum width occupied by page content.\nmainfont: Sets the font-family property for the document.\nfontsize: Sets the base CSS font-size for the document.\nfontcolor: Sets the default text color for the document.\nlinkcolor: Sets the default text color for hyperlinks..\nbackgroundcolor: Sets the background-color for the document..\nmonobackgroundcolor: Sets the background-color property for &lt;code&gt; elements..\nmonofont: Sets the font-family property for &lt;code&gt; elements..\nmargin-left, margin-right, margin-top, margin-bottom: Sets the CSS margin properties for the document body.\nlinestretch: Sets the CSS line-height property (affects distance between lines of text, defaults to 1.5).\n\nFor Example :\nformat:\n  html: \n    theme: cosmo\n    fontsize: 1.1em\n    linestretch: 1.7\nYou can naturally also create an entirely custom theme and provide only that (in this case you will inherit from the default Bootstrap theme):\ntheme: custom.scss\nYou can read more about the custom theming design on Quarto here.\nIn addition to providing a single theme for your html output, you may also provide a light and dark theme. For example:\ntheme:\n  light: flatly\n  dark: darkly"
  },
  {
    "objectID": "lessons/unit_bonus/Quarto_Theming/quarto_theming.html#conclusion",
    "href": "lessons/unit_bonus/Quarto_Theming/quarto_theming.html#conclusion",
    "title": "Quarto Themimg",
    "section": "Conclusion",
    "text": "Conclusion\nNice work completing this lesson! By now you should:\n\nKnow about various themes available in Quarto.\nKnow how to apply customization to your website from the _quarto.yml."
  },
  {
    "objectID": "lessons/unit_bonus/Embedding_Iframes/Embedding_IFrames.html",
    "href": "lessons/unit_bonus/Embedding_Iframes/Embedding_IFrames.html",
    "title": "Embedding Inline Frames (IFrames)",
    "section": "",
    "text": "In this lesson, we’ll discover how to add Inline Frames (IFrames) to your Quarto Website to be able to pull content from multiple servers to make a more coherent user experience."
  },
  {
    "objectID": "lessons/unit_bonus/Embedding_Iframes/Embedding_IFrames.html#overview",
    "href": "lessons/unit_bonus/Embedding_Iframes/Embedding_IFrames.html#overview",
    "title": "Embedding Inline Frames (IFrames)",
    "section": "",
    "text": "In this lesson, we’ll discover how to add Inline Frames (IFrames) to your Quarto Website to be able to pull content from multiple servers to make a more coherent user experience."
  },
  {
    "objectID": "lessons/unit_bonus/Embedding_Iframes/Embedding_IFrames.html#learning-objectives",
    "href": "lessons/unit_bonus/Embedding_Iframes/Embedding_IFrames.html#learning-objectives",
    "title": "Embedding Inline Frames (IFrames)",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nStudents will understand what Inline Frames are and when to use them.\nStudents will be able to add Inline Frames to their Quarto website to be able to build a coherent site experience."
  },
  {
    "objectID": "lessons/unit_bonus/Embedding_Iframes/Embedding_IFrames.html#lesson",
    "href": "lessons/unit_bonus/Embedding_Iframes/Embedding_IFrames.html#lesson",
    "title": "Embedding Inline Frames (IFrames)",
    "section": "Lesson",
    "text": "Lesson\n\nWhat is an Inline Frame ?\nAn Inline Frame (IFrame) is an HTML element that contains another HTML document within it. It can be placed anywhere on a webpage and can most often used to embed specific content like videos, documents, slides, and even a full webpage, within a different webpage. It’s a powerful HTML capability, that can be used in your Quarto website to take any content from any website (with permission) and place it on your own site to enhance your content.\n\n\nEmbedding Inline Frames in Quarto\nTo Embed an IFrame within Quarto, firstly:\n\nWe create a HTML block within your Markdown. As such:\n\n```{=html}\n\n```\n\nWe add the &lt;iframe&gt; HTML tag. This tag requires a src (source) attribute, which specifies the URL of the HTML file to be embedded on the page. As such:\n\n```{=html}\n&lt;iframe src=\"URL of HTML file\"&gt;&lt;/iframe&gt;\n```\n\nA simple piece of functional embedded IFrame code looks like this:\n\n```{=html}\n&lt;iframe src=\"https://www.example.com/\" width=\"1500px\" height=\"500px\"&gt;&lt;/iframe&gt;\n```\n\nThe code above will embed the webpage onto the parent page (your quarto page) and will look like this:\n\n\n\nThis embedded page exists separately from the parent page in terms of its HTML and styling\n\nYou’ll notice that the code snippet above has some extra attribute, width and height. These set the dimensions of the region that displays the embedded content. Inline frames can be customised with other attributes as well. These attributes include:\n\nsrc: The URL of the content included in the iframe.\nallow: Indicates what features the iframe is allowed to use (e.g. autoplay, fullscreen, camera).\nallowfullscreen: Grants or denies permission for the iframe to appear in full-screen.\nheight: Sets the height of the iframe (defaults to 150 pixels if not specified).\nwidth: Sets the width of the iframe (defaults to 300 pixels if not specified).\nreferrerpolicy: Sets what referrer information should be sent in the request for the iframe.\nloading: Sets lazy loading or eager loading for the iframe."
  },
  {
    "objectID": "lessons/unit_bonus/Embedding_Iframes/Embedding_IFrames.html#practice-activity",
    "href": "lessons/unit_bonus/Embedding_Iframes/Embedding_IFrames.html#practice-activity",
    "title": "Embedding Inline Frames (IFrames)",
    "section": "Practice Activity",
    "text": "Practice Activity\nFor this lesson, your task will be to:\n\nEmbed the official Quarto website homepage on your webpage.\nFollow the steps above, using this URL - https://quarto.org/ - as the src.\nSet the width and height as 780 and 500 respectively.\nThe result should look like this when you’re done;"
  },
  {
    "objectID": "lessons/unit_bonus/Embedding_Iframes/Embedding_IFrames.html#conclusion",
    "href": "lessons/unit_bonus/Embedding_Iframes/Embedding_IFrames.html#conclusion",
    "title": "Embedding Inline Frames (IFrames)",
    "section": "Conclusion",
    "text": "Conclusion\nGood Job completing this lesson! By now you should:\n\nKnow when to embed an Inline Frame in your webpage.\nKnow how to make your website content richer by adding Inline Frames."
  },
  {
    "objectID": "lessons/unit_bonus/Advanced_Git/Advanced_Git.html",
    "href": "lessons/unit_bonus/Advanced_Git/Advanced_Git.html",
    "title": "Advanced Git Concepts and Troubleshooting",
    "section": "",
    "text": "In the previous lesson on Git, we learned of foundational git concepts and commands using the terminal and directly from VS code. In this lesson, we’ll explore some advanced git concepts and how to troubleshoot issues, when things are not working properly."
  },
  {
    "objectID": "lessons/unit_bonus/Advanced_Git/Advanced_Git.html#overview",
    "href": "lessons/unit_bonus/Advanced_Git/Advanced_Git.html#overview",
    "title": "Advanced Git Concepts and Troubleshooting",
    "section": "",
    "text": "In the previous lesson on Git, we learned of foundational git concepts and commands using the terminal and directly from VS code. In this lesson, we’ll explore some advanced git concepts and how to troubleshoot issues, when things are not working properly."
  },
  {
    "objectID": "lessons/unit_bonus/Advanced_Git/Advanced_Git.html#learning-objectives",
    "href": "lessons/unit_bonus/Advanced_Git/Advanced_Git.html#learning-objectives",
    "title": "Advanced Git Concepts and Troubleshooting",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nStudents will understand and be able to run some advanced Git functions using the terminal.\nStudents will be able to resolve common conflicts that come up while using Git."
  },
  {
    "objectID": "lessons/unit_bonus/Advanced_Git/Advanced_Git.html#lesson",
    "href": "lessons/unit_bonus/Advanced_Git/Advanced_Git.html#lesson",
    "title": "Advanced Git Concepts and Troubleshooting",
    "section": "Lesson",
    "text": "Lesson\nGit provides developers with some powerful features and has become the standard tool for version control. Using its advanced features can seem intimidating at first, but with regular practice, they can become second nature and can greatly improve your workflow. If you’re feeling motivated, here are some advanced Git concepts and commands to enhance your productivity :\n\nGit Stash\ngit stash\nYou may have noticed that while working on a branch locally, you won’t be able to checkout (switch) to another branch and pull in upstream (remote repo) changes without making a commit of the changes made to your current branch. With git stash you can temporarily save changes made on your working branch so you can switch to a different branch, pull in upstream changes, and switch back to your original branch, at which point you can apply the saved changes. It works by keeping or saving all of your uncommitted changes locally, but doesn’t commit them, while also cleaning up your working tree. Stashing can come in handy if you need to move away from what you are doing, say to fix an urgent bug, but aren’t quite ready to commit what you’ve done so far.\ngit stash pop\nWhen you’re ready to continue, you can pull your changes from the stash with the command above.\n\n\nGit Revert\nGit revert is a command that allows you to undo a previous commit without deleting it entirely. It creates a new commit that reverses the changes made in the previous commit, making it easy to fix mistakes or roll back to a previous version of your project. You can use git revert when you want to undo changes that have already been pushed to a shared repository or when you need to fix a bug without affecting other parts of your code. To use git revert, you need to identify the commit you want to undo and run the command:\ngit revert &lt;commit-hash&gt;\nThis will create a new commit that reverses the changes introduced by the previous commit. It’s important to note that git revert doesn’t delete any commits or rewrite the commit history, which makes it a safer option compared to other undo methods. You can also use this if you want to revert the latest commit:\ngit revert HEAD\n\n\nGit Grep\nGit grep is a command that lets you search for specific text or patterns within your repository. This can be helpful when you need to find all instances of a particular function, variable, or string across your project. It searches through the tracked files in the current branch of a Git repository and returns a list of files that match the specified text or pattern, along with the line numbers where it appears. This can be particularly helpful when working on large projects with many files and lines of code.\nTo use git grep, simply run the command followed by the search term:\ngit grep &lt;search-term&gt;\n\n\nGit Diff\nGit diff allows you to compare file changes between the working directory and the latest commit in the local repository, two commits or two branches. It shows the differences between the files, highlighting the lines that were added or removed. This command is useful when you want to review your changes before committing them, or when you want to see the changes made by someone else on your team. It’s also helpful when you want to troubleshoot issues by comparing different versions of your code.\nTo compare file changes between the working directory and the local repository, simply type:\ngit diff\nTo compare two commits:\ngit diff &lt;commit1&gt;&lt;commit2&gt;\nTo compare two branches:\ngit diff &lt;branch1&gt; -- &lt;branch2&gt;\n\n\nGit Rebase\nIf you wanted to merge all your commits in a feature branch to the main branch, what probably comes to mind is using the git merge command. This will take all of the changes in the featured branch and stuff it into one merge commit and then put that merge commit into the main branch. After those changes are combined into that merge commit, it looks scattered, especially when you have a bunch of people working on the featured branch and pushing changes almost every time.\n\n\n\nGit Merge\n\n\nThe git rebase command can solve that for us. It takes all of your commits from a featured branch and moves them on top of the main commit.\n\n\n\nGit Rebase\n\n\nA major advantage is that it easily traces your commits inside the main branch. You should use the git rebase command to consolidate into a single branch when you have multiple private branches. This will display the commit history in a linear form, which makes it easy to see the progression of changes because they are all applied one after the other, without any branches or merge commits. This can make it easier to understand how the code evolved over time.\nAdditionally, a linear history can make it easier to track down bugs because you can more easily see when a particular change was introduced, and to revert changes since you can simply revert a single commit rather than dealing with the complexity of merging branches.\nTo use the rebase command, simply type:\ngit rebase &lt;base&gt;\nWhere &lt;base&gt; is the branch you want to move your current branch to.\n\n\nGit Clean\nIf you have files in your working directory that you don’t want or need, git clean can help you out. Git Clean is a command that allows you to remove untracked files from your working directory. These could be temporary files, build artifacts, or other files that you don’t need. To use git clean - just navigate to the directory where you want to clean up and run the command:\ngit clean\nYou can also use options like -n to preview which files will be deleted before actually deleting them, and -d to delete untracked directories as well as files. Git Clean is useful for keeping your working directory clean and organized. Just be careful not to accidentally delete any important files!"
  },
  {
    "objectID": "lessons/unit_bonus/Advanced_Git/Advanced_Git.html#conclusion",
    "href": "lessons/unit_bonus/Advanced_Git/Advanced_Git.html#conclusion",
    "title": "Advanced Git Concepts and Troubleshooting",
    "section": "Conclusion",
    "text": "Conclusion\nGood Job completing this lesson! By now you should:\n\nUnderstand some advanced Git concepts and know how to run Git commands using the terminal.\nKnow how to troubleshoot conflicts that may arise while using Git."
  }
]